{"version":3,"sources":["index.js","lib/add.js","lib/config.js","lib/print.js","lib/remove.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA,ACHA;AJaA,ACHA,AENA,ACHA;AJaA,ACHA,AENA,ACHA;AJaA,ACHA,AENA,ACHA;AJaA,ACHA,AENA,ACHA;AHUA,AENA,ACHA;AHUA,AENA,ACHA;AHUA,AENA,ACHA;AHUA,AENA,ACHA;AHUA,AENA,ACHA;AHUA,AENA,ACHA;AHUA,AENA,ACHA;AHUA,AENA,ACHA;AHUA,AENA,ACHA;AHUA,AENA,ACHA;AHUA,AENA,ACHA;AHUA,AENA,ACHA;AHUA,AENA,ACHA;AHUA,AENA,ACHA;AHUA,AENA,ACHA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["const add = require('./lib/add')\nconst print = require('./lib/print')\nconst remove = require('./lib/remove')\n\nmodule.exports = function (argv) {\n  switch (argv._[0]) {\n    case 'add':\n      add(argv)\n      break\n    case 'remove':\n      remove(argv)\n      break\n    default:\n      print()\n  }\n}\n","const inq = require('inquirer')\nconst timezones = require('./timezones')\nconst Fuse = require('fuse.js')\nconst config = require('./config')\n\nvar keyword\nmodule.exports = function (argv) {\n  const q = [\n    {\n      type: 'input',\n      message: 'type a keyword of City or Country name to add it (eg: london):',\n      name: 'keyword',\n      validate (val) {\n        return !!val\n      }\n    }\n  ]\n  const options = {\n    /* default options\n    caseSensitive: false,\n    includeScore: false,\n    shouldSort: true,\n    threshold: 0.6,\n    location: 0,\n    distance: 100,\n    maxPatternLength: 32,\n    */\n    keys: ['value', 'text']\n  }\n\n  if (argv._[1]) {\n    keyword = argv._[1]\n    search(keyword, options)\n  } else {\n    inq.prompt(q, a => {\n      keyword = a.keyword\n      search(keyword, options)\n    })\n  }\n\n  function search (key, options) {\n    const fuse = new Fuse(timezones, options)\n    const matches = fuse.search(key)\n    if (!matches || matches.length === 0 ){\n      return console.log('no matched timezone'.red)\n    }\n    askIndex(matches)\n  }\n\n  function askIndex (matches) {\n    const q = [\n      {\n        type: 'list',\n        message: `Here are ${matches.length} matched timezones, select one:`,\n        choices: matches.map(m => {\n          const plus = m.offset > 0 ? '+' : ''\n          const offset = plus + m.offset.toString()\n          return `[${offset}]${' '.repeat(6 - offset.length)}${m.value}`\n        }),\n        name: 'name'\n      }\n    ]\n    inq.prompt(q, a => {\n      const timezone = getTimezoneByName(a.name.replace(/([(0-9)\\[\\]\\+\\-\\. ])+/i, ''))\n      timezone.input = keyword\n      console.log(`\\n${'âˆš'.green} You\\'ve selected:\\n\\n${a.name.gray} ${timezone.text.gray}\\n`)\n      config\n        .get('timezones')\n        .then(addTimezone)\n\n      function addTimezone (ts) {\n        ts = ts || []\n        if (checkTimezoneExists(ts, timezone.value)) {\n          return console.log('Timezone already existed in config file!\\n'.red)\n        }\n        ts.push(timezone)\n        config\n          .set('timezones', ts)\n          .then(ts => {\n            console.log('Success!'.green)\n          })\n          .catch(err => console.log(err))\n      }\n    })\n  }\n\n  function checkTimezoneExists (ts, value) {\n    for (var i = 0; i < ts.length; i++) {\n      if (ts[i].value === value) {\n        return true\n      }\n    }\n    return false\n  }\n\n  function getTimezoneByName (name) {\n    for (var i = 0; i < timezones.length; i++) {\n      if (timezones[i].value === name) {\n        return timezones[i]\n      }\n    }\n  }\n}\n","const Config = require('myconf')\nmodule.exports = new Config('.momentsrc')\n","const moment = require('moment')\nconst config = require('./config')\nconst logUpdate = require('log-update')\n\nmodule.exports = function (argv) {\n  config\n    .get('timezones')\n    .then(parseTimezones)\n    .catch(err => console.log(err))\n\n  function parseTimezones (ts) {\n    if (!ts || ts.length === 0) {\n      return console.log(`run ${'mm add'.cyan} to add timezone first`)\n    }\n    setInterval(() => {\n      const result = ts.map(t => {\n        return `[ ${t.value.gray + ' ('.gray + t.input.gray + ')'.gray} ]\\n${moment().utcOffset(t.offset)}`\n      }).join('\\n\\n')\n      logUpdate(result)\n    }, 1000)\n  }\n}\n","const config = require('./config')\nconst inq = require('inquirer')\n\nmodule.exports = function (argv) {\n  config\n    .get('timezones')\n    .then(removeTimezone)\n    .catch(err => console.log(err))\n\n  function removeTimezone (ts) {\n    const q = [\n      {\n        type: 'list',\n        choices: ts.map(t => `${t.value} (${t.input})`),\n        name: 'choice',\n        message: 'Choose a timezone to remove:'\n      }\n    ]\n    inq.prompt(q, a => {\n      const re = /([a-zA-Z0-9 ])+/i\n      const name = a.choice.match(re)[0].trim()\n      if (!name) {\n        return console.log('nothing matches'.red)\n      }\n      removeTimezoneByName(ts, name)\n    })\n  }\n\n  function removeTimezoneByName (ts, name) {\n    ts = ts.filter(t => {\n      return t.value !== name\n    })\n    config\n      .set('timezones', ts)\n      .then(ts => {\n        console.log(`You've removed ${name}!`.green)\n      })\n  }\n}\n"]}