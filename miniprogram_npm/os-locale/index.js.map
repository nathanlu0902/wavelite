{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\nvar childProcess = require('child_process');\nvar execFileSync = childProcess.execFileSync;\nvar lcid = require('lcid');\nvar defaultOpts = {spawn: true};\nvar cache;\n\nfunction fallback() {\n\tcache = 'en_US';\n\treturn cache;\n}\n\nfunction getEnvLocale(env) {\n\tenv = env || process.env;\n\tvar ret = env.LC_ALL || env.LC_MESSAGES || env.LANG || env.LANGUAGE;\n\tcache = getLocale(ret);\n\treturn ret;\n}\n\nfunction parseLocale(x) {\n\tvar env = x.split('\\n').reduce(function (env, def) {\n\t\tdef = def.split('=');\n\t\tenv[def[0]] = def[1];\n\t\treturn env;\n\t}, {});\n\treturn getEnvLocale(env);\n}\n\nfunction getLocale(str) {\n\treturn (str && str.replace(/[.:].*/, '')) || fallback();\n}\n\nmodule.exports = function (opts, cb) {\n\tif (typeof opts === 'function') {\n\t\tcb = opts;\n\t\topts = defaultOpts;\n\t} else {\n\t\topts = opts || defaultOpts;\n\t}\n\n\tif (cache || getEnvLocale() || opts.spawn === false) {\n\t\tsetImmediate(cb, null, cache);\n\t\treturn;\n\t}\n\n\tvar getAppleLocale = function () {\n\t\tchildProcess.execFile('defaults', ['read', '-g', 'AppleLocale'], function (err, stdout) {\n\t\t\tif (err) {\n\t\t\t\tfallback();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcache = stdout.trim() || fallback();\n\t\t\tcb(null, cache);\n\t\t});\n\t};\n\n\tif (process.platform === 'win32') {\n\t\tchildProcess.execFile('wmic', ['os', 'get', 'locale'], function (err, stdout) {\n\t\t\tif (err) {\n\t\t\t\tfallback();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar lcidCode = parseInt(stdout.replace('Locale', ''), 16);\n\t\t\tcache = lcid.from(lcidCode) || fallback();\n\t\t\tcb(null, cache);\n\t\t});\n\t} else {\n\t\tchildProcess.execFile('locale', function (err, stdout) {\n\t\t\tif (err) {\n\t\t\t\tfallback();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar res = parseLocale(stdout);\n\n\t\t\tif (!res && process.platform === 'darwin') {\n\t\t\t\tgetAppleLocale();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcache = getLocale(res);\n\t\t\tcb(null, cache);\n\t\t});\n\t}\n};\n\nmodule.exports.sync = function (opts) {\n\topts = opts || defaultOpts;\n\n\tif (cache || getEnvLocale() || !execFileSync || opts.spawn === false) {\n\t\treturn cache;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\tvar stdout;\n\n\t\ttry {\n\t\t\tstdout = execFileSync('wmic', ['os', 'get', 'locale'], {encoding: 'utf8'});\n\t\t} catch (err) {\n\t\t\treturn fallback();\n\t\t}\n\n\t\tvar lcidCode = parseInt(stdout.replace('Locale', ''), 16);\n\t\tcache = lcid.from(lcidCode) || fallback();\n\t\treturn cache;\n\t}\n\n\tvar res;\n\n\ttry {\n\t\tres = parseLocale(execFileSync('locale', {encoding: 'utf8'}));\n\t} catch (err) {}\n\n\tif (!res && process.platform === 'darwin') {\n\t\ttry {\n\t\t\tcache = execFileSync('defaults', ['read', '-g', 'AppleLocale'], {encoding: 'utf8'}).trim() || fallback();\n\t\t\treturn cache;\n\t\t} catch (err) {\n\t\t\treturn fallback();\n\t\t}\n\t}\n\n\tcache = getLocale(res);\n\treturn cache;\n};\n"]}