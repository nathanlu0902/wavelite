{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\nvar spawn = require('child_process').spawn;\nvar path = require('path');\nvar Configstore = require('configstore');\nvar chalk = require('chalk');\nvar semverDiff = require('semver-diff');\nvar latestVersion = require('latest-version');\nvar stringLength = require('string-length');\nvar isNpm = require('is-npm');\nvar repeating = require('repeating');\n\nfunction UpdateNotifier(options) {\n\tthis.options = options = options || {};\n\toptions.pkg = options.pkg || {};\n\n\t// deprecated options\n\t// TODO: remove this at some point far into the future\n\tif (options.packageName && options.packageVersion) {\n\t\toptions.pkg.name = options.packageName;\n\t\toptions.pkg.version = options.packageVersion;\n\t}\n\n\tif (!options.pkg.name || !options.pkg.version) {\n\t\tthrow new Error('pkg.name and pkg.version required');\n\t}\n\n\tthis.packageName = options.pkg.name;\n\tthis.packageVersion = options.pkg.version;\n\tthis.updateCheckInterval = typeof options.updateCheckInterval === 'number' ? options.updateCheckInterval : 1000 * 60 * 60 * 24; // 1 day\n\tthis.hasCallback = typeof options.callback === 'function';\n\tthis.callback = options.callback || function () {};\n\n\tif (!this.hasCallback) {\n\t\tthis.config = new Configstore('update-notifier-' + this.packageName, {\n\t\t\toptOut: false,\n\t\t\t// init with the current time so the first check is only\n\t\t\t// after the set interval, so not to bother users right away\n\t\t\tlastUpdateCheck: Date.now()\n\t\t});\n\t}\n}\n\nUpdateNotifier.prototype.check = function () {\n\tif (this.hasCallback) {\n\t\treturn this.checkNpm(this.callback);\n\t}\n\n\tif (this.config.get('optOut') || 'NO_UPDATE_NOTIFIER' in process.env || process.argv.indexOf('--no-update-notifier') !== -1) {\n\t\treturn;\n\t}\n\n\tthis.update = this.config.get('update');\n\n\tif (this.update) {\n\t\tthis.config.del('update');\n\t}\n\n\t// Only check for updates on a set interval\n\tif (Date.now() - this.config.get('lastUpdateCheck') < this.updateCheckInterval) {\n\t\treturn;\n\t}\n\n\t// Spawn a detached process, passing the options as an environment property\n\tspawn(process.execPath, [path.join(__dirname, 'check.js'), JSON.stringify(this.options)], {\n\t\tdetached: true,\n\t\tstdio: 'ignore'\n\t}).unref();\n};\n\nUpdateNotifier.prototype.checkNpm = function (cb) {\n\tlatestVersion(this.packageName, function (err, latestVersion) {\n\t\tif (err) {\n\t\t\treturn cb(err);\n\t\t}\n\n\t\tcb(null, {\n\t\t\tlatest: latestVersion,\n\t\t\tcurrent: this.packageVersion,\n\t\t\ttype: semverDiff(this.packageVersion, latestVersion) || 'latest',\n\t\t\tname: this.packageName\n\t\t});\n\t}.bind(this));\n};\n\nUpdateNotifier.prototype.notify = function (opts) {\n\tif (!process.stdout.isTTY || isNpm || !this.update) {\n\t\treturn this;\n\t}\n\n\topts = opts || {};\n\topts.defer = opts.defer === undefined ? true : false;\n\n\tvar line1 = ' Update available: ' + chalk.green.bold(this.update.latest) +\n\t\tchalk.dim(' (current: ' + this.update.current + ')') + ' ';\n\tvar line2 = ' Run ' + chalk.blue('npm install -g ' + this.packageName) +\n\t\t' to update. ';\n\tvar contentWidth = Math.max(stringLength(line1), stringLength(line2));\n\tvar line1rest = contentWidth - stringLength(line1);\n\tvar line2rest = contentWidth - stringLength(line2);\n\tvar top = chalk.yellow('┌' + repeating('─', contentWidth) + '┐');\n\tvar bottom = chalk.yellow('└' + repeating('─', contentWidth) + '┘');\n\tvar side = chalk.yellow('│');\n\n\tvar message =\n\t\t'\\n\\n' +\n\t\ttop + '\\n' +\n\t\tside + line1 + repeating(' ', line1rest) + side + '\\n' +\n\t\tside + line2 + repeating(' ', line2rest) + side + '\\n' +\n\t\tbottom + '\\n';\n\n\tif (opts.defer) {\n\t\tprocess.on('exit', function () {\n\t\t\tconsole.error(message);\n\t\t});\n\t} else {\n\t\tconsole.error(message);\n\t}\n\n\treturn this;\n};\n\nmodule.exports = function (options) {\n\tvar updateNotifier = new UpdateNotifier(options);\n\tupdateNotifier.check();\n\treturn updateNotifier;\n};\n\nmodule.exports.UpdateNotifier = UpdateNotifier;\n"]}