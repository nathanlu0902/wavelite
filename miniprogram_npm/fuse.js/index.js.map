{"version":3,"sources":["fuse.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/**\n * @license\n * Fuse - Lightweight fuzzy-search\n *\n * Copyright (c) 2012 Kirollos Risk <kirollos@gmail.com>.\n * All Rights Reserved. Apache Software License 2.0\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n(function(global) {\n\n  /**\n   * Adapted from \"Diff, Match and Patch\", by Google\n   *\n   *   http://code.google.com/p/google-diff-match-patch/\n   *\n   * Modified by: Kirollos Risk <kirollos@gmail.com>\n   * -----------------------------------------------\n   * Details: the algorithm and structure was modified to allow the creation of\n   * <Searcher> instances with a <search> method which does the actual\n   * bitap search. The <pattern> (the string that is searched for) is only defined\n   * once per instance and thus it eliminates redundant re-creation when searching\n   * over a list of strings.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   */\n  var BitapSearcher = function(pattern, options) {\n    options = options || {};\n    this.options = options;\n    this.options.location = options.location || BitapSearcher.defaultOptions.location;\n    this.options.distance = 'distance' in options ? options.distance : BitapSearcher.defaultOptions.distance;\n    this.options.threshold = 'threshold' in options ? options.threshold : BitapSearcher.defaultOptions.threshold;\n    this.options.maxPatternLength = options.maxPatternLength || BitapSearcher.defaultOptions.maxPatternLength;\n\n    this.pattern = options.caseSensitive ? pattern : pattern.toLowerCase();\n    this.patternLen = pattern.length;\n\n    if (this.patternLen > this.options.maxPatternLength) {\n      throw new Error('Pattern length is too long');\n    }\n\n    this.matchmask = 1 << (this.patternLen - 1);\n    this.patternAlphabet = this._calculatePatternAlphabet();\n  };\n\n  BitapSearcher.defaultOptions = {\n    // Approximately where in the text is the pattern expected to be found?\n    location: 0,\n\n    // Determines how close the match must be to the fuzzy location (specified above).\n    // An exact letter match which is 'distance' characters away from the fuzzy location\n    // would score as a complete mismatch. A distance of '0' requires the match be at\n    // the exact location specified, a threshold of '1000' would require a perfect match\n    // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n    distance: 100,\n\n    // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n    // (of both letters and location), a threshold of '1.0' would match anything.\n    threshold: 0.6,\n\n    // Machine word size\n    maxPatternLength: 32\n  };\n\n  /**\n   * Initialize the alphabet for the Bitap algorithm.\n   * @return {Object} Hash of character locations.\n   * @private\n   */\n  BitapSearcher.prototype._calculatePatternAlphabet = function() {\n    var mask = {},\n      i = 0;\n\n    for (i = 0; i < this.patternLen; i++) {\n      mask[this.pattern.charAt(i)] = 0;\n    }\n\n    for (i = 0; i < this.patternLen; i++) {\n      mask[this.pattern.charAt(i)] |= 1 << (this.pattern.length - i - 1);\n    }\n\n    return mask;\n  };\n\n  /**\n   * Compute and return the score for a match with `e` errors and `x` location.\n   * @param {number} errors Number of errors in match.\n   * @param {number} location Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n  BitapSearcher.prototype._bitapScore = function(errors, location) {\n    var accuracy = errors / this.patternLen,\n      proximity = Math.abs(this.options.location - location);\n\n    if (!this.options.distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n    return accuracy + (proximity / this.options.distance);\n  };\n\n  /**\n   * Compute and return the result of the search\n   * @param {String} text The text to search in\n   * @return {Object} Literal containing:\n   *                          {Boolean} isMatch Whether the text is a match or not\n   *                          {Decimal} score Overall score for the match\n   * @public\n   */\n  BitapSearcher.prototype.search = function(text) {\n    text = this.options.caseSensitive ? text : text.toLowerCase();\n\n    if (this.pattern === text) {\n      // Exact match\n      return {\n        isMatch: true,\n        score: 0\n      };\n    }\n\n    var i, j,\n      // Set starting location at beginning text and initialize the alphabet.\n      textLen = text.length,\n      LOCATION = this.options.location,\n      // Highest score beyond which we give up.\n      THRESHOLD = this.options.threshold,\n      // Is there a nearby exact match? (speedup)\n      bestLoc = text.indexOf(this.pattern, LOCATION),\n      binMin, binMid,\n      binMax = this.patternLen + textLen,\n      start, finish,\n      bitArr, lastBitArr,\n      charMatch,\n      score = 1,\n      locations = [];\n\n    if (bestLoc != -1) {\n      THRESHOLD = Math.min(this._bitapScore(0, bestLoc), THRESHOLD);\n      // What about in the other direction? (speedup)\n      bestLoc = text.lastIndexOf(this.pattern, LOCATION + this.patternLen);\n\n      if (bestLoc != -1) {\n        THRESHOLD = Math.min(this._bitapScore(0, bestLoc), THRESHOLD);\n      }\n    }\n\n    bestLoc = -1;\n\n    for (i = 0; i < this.patternLen; i++) {\n      // Scan for the best match; each iteration allows for one more error.\n      // Run a binary search to determine how far from 'MATCH_LOCATION' we can stray at this\n      // error level.\n      binMin = 0;\n      binMid = binMax;\n      while (binMin < binMid) {\n        if (this._bitapScore(i, LOCATION + binMid) <= THRESHOLD) {\n          binMin = binMid;\n        } else {\n          binMax = binMid;\n        }\n        binMid = Math.floor((binMax - binMin) / 2 + binMin);\n      }\n\n      // Use the result from this iteration as the maximum for the next.\n      binMax = binMid;\n      start = Math.max(1, LOCATION - binMid + 1);\n      finish = Math.min(LOCATION + binMid, textLen) + this.patternLen;\n\n      // Initialize the bit array\n      bitArr = Array(finish + 2);\n\n      bitArr[finish + 1] = (1 << i) - 1;\n\n      for (j = finish; j >= start; j--) {\n        // The alphabet <patternAlphabet> is a sparse hash, so the following line generates warnings.\n        charMatch = this.patternAlphabet[text.charAt(j - 1)];\n\n        if (i === 0) {\n          // First pass: exact match.\n          bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;\n        } else {\n          // Subsequent passes: fuzzy match.\n          bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch | (((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1) | lastBitArr[j + 1];\n        }\n        if (bitArr[j] & this.matchmask) {\n          score = this._bitapScore(i, j - 1);\n          // This match will almost certainly be better than any existing match.\n          // But check anyway.\n          if (score <= THRESHOLD) {\n            // Told you so.\n            THRESHOLD = score;\n            bestLoc = j - 1;\n            locations.push(bestLoc);\n\n            if (bestLoc > LOCATION) {\n              // When passing loc, don't exceed our current distance from loc.\n              start = Math.max(1, 2 * LOCATION - bestLoc);\n            } else {\n              // Already passed loc, downhill from here on in.\n              break;\n            }\n          }\n        }\n      }\n\n      // No hope for a (better) match at greater error levels.\n      if (this._bitapScore(i + 1, LOCATION) > THRESHOLD) {\n        break;\n      }\n      lastBitArr = bitArr;\n    }\n\n    return {\n      isMatch: bestLoc >= 0,\n      score: score\n    };\n  };\n\n  var deepValueHelper = function(obj, path, list) {\n    var firstSegment, remaining, dotIndex;\n\n    if (!path) {\n      // If there's no path left, we've gotten to the object we care about.\n      list.push(obj);\n    } else {\n      dotIndex = path.indexOf('.');\n      if (dotIndex !== -1) {\n        firstSegment = path.slice(0, dotIndex);\n        remaining = path.slice(dotIndex + 1);\n      } else {\n        firstSegment = path;\n      }\n\n      var value = obj[firstSegment];\n      if (value) {\n        if (!remaining && (typeof value === 'string' || typeof value === 'number')) {\n          list.push(value);\n        } else if (Utils.isArray(value)) {\n          // Search each item in the array.\n          for (var i = 0, len = value.length; i < len; i++) {\n            deepValueHelper(value[i], remaining, list);\n          }\n        } else if (remaining) {\n          // An object. Recurse further.\n          deepValueHelper(value, remaining, list);\n        }\n      }\n    }\n\n    return list;\n  };\n\n  var Utils = {\n    /**\n     * Traverse an object\n     * @param {Object} obj The object to traverse\n     * @param {String} path A . separated path to a key in the object. Example 'Data.Object.Somevalue'\n     * @return {Object}\n     */\n    deepValue: function(obj, path) {\n      return deepValueHelper(obj, path, []);\n    },\n    isArray: function(obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    }\n  };\n\n  /**\n   * @param {Array} list\n   * @param {Object} options\n   * @public\n   */\n  function Fuse(list, options) {\n    this.list = list;\n    this.options = options = options || {};\n\n    var i, len, key, keys;\n    // Add boolean type options\n    for (i = 0, keys = ['sort', 'shouldSort'], len = keys.length; i < len; i++) {\n      key = keys[i];\n      this.options[key] = key in options ? options[key] : Fuse.defaultOptions[key];\n    }\n    // Add all other options\n    for (i = 0, keys = ['searchFn', 'sortFn', 'keys', 'getFn', 'include'], len = keys.length; i < len; i++) {\n      key = keys[i];\n      this.options[key] = options[key] || Fuse.defaultOptions[key];\n    }\n  };\n\n  Fuse.defaultOptions = {\n    id: null,\n\n    caseSensitive: false,\n\n    // A list of values to be passed from the searcher to the result set.\n    // If include is set to ['score', 'highlight'], each result\n    //   in the list will be of the form: `{ item: ..., score: ..., highlight: ... }`\n    include: [],\n\n    // Whether to sort the result list, by score\n    shouldSort: true,\n\n    // The search function to use\n    // Note that the default search function ([[Function]]) must conform to the following API:\n    //\n    //  @param pattern The pattern string to search\n    //  @param options The search option\n    //  [[Function]].constructor = function(pattern, options)\n    //\n    //  @param text: the string to search in for the pattern\n    //  @return Object in the form of:\n    //    - isMatch: boolean\n    //    - score: Int\n    //  [[Function]].prototype.search = function(text)\n    searchFn: BitapSearcher,\n\n    // Default sort function\n    sortFn: function(a, b) {\n      return a.score - b.score;\n    },\n\n    // Default get function\n    getFn: Utils.deepValue,\n\n    keys: []\n  };\n\n  /**\n   * Sets a new list for Fuse to match against.\n   * @param {Array} list\n   * @return {Array} The newly set list\n   * @public\n   */\n  Fuse.prototype.set = function(list) {\n    this.list = list;\n\n    return list;\n  };\n\n  /**\n   * Searches for all the items whose keys (fuzzy) match the pattern.\n   * @param {String} pattern The pattern string to fuzzy search on.\n   * @return {Array} A list of all serch matches.\n   * @public\n   */\n  Fuse.prototype.search = function(pattern) {\n    var searcher = new(this.options.searchFn)(pattern, this.options),\n      j, item,\n      list = this.list,\n      dataLen = list.length,\n      options = this.options,\n      searchKeys = this.options.keys,\n      searchKeysLen = searchKeys.length,\n      bitapResult,\n      rawResults = [],\n      resultMap = {},\n      existingResult,\n      results = [];\n\n    /**\n     * Calls <Searcher::search> for bitap analysis. Builds the raw result list.\n     * @param {String} text The pattern string to fuzzy search on.\n     * @param {String|Number} entity If the <data> is an Array, then entity will be an index,\n     *                            otherwise it's the item object.\n     * @param {Number} index\n     * @private\n     */\n    var analyzeText = function(text, entity, index) {\n      // Check if the text can be searched\n      if (text === undefined || text === null) {\n        return;\n      }\n\n      if (typeof text === 'string') {\n\n        // Get the result\n        bitapResult = searcher.search(text);\n\n        // If a match is found, add the item to <rawResults>, including its score\n        if (bitapResult.isMatch) {\n\n          // Check if the item already exists in our results\n          existingResult = resultMap[index];\n          if (existingResult) {\n            // Use the lowest score\n            existingResult.score = Math.min(existingResult.score, bitapResult.score);\n          } else {\n            // Add it to the raw result list\n            resultMap[index] = {\n              item: entity,\n              score: bitapResult.score\n            };\n            rawResults.push(resultMap[index]);\n          }\n        }\n      } else if (Utils.isArray(text)) {\n        for (var i = 0; i < text.length; i++) {\n          analyzeText(text[i], entity, index);\n        }\n      }\n    };\n\n    // Check the first item in the list, if it's a string, then we assume\n    // that every item in the list is also a string, and thus it's a flattened array.\n    if (typeof list[0] === 'string') {\n      // Iterate over every item\n      for (var i = 0; i < dataLen; i++) {\n        analyzeText(list[i], i, i);\n      }\n    } else {\n      // Otherwise, the first item is an Object (hopefully), and thus the searching\n      // is done on the values of the keys of each item.\n\n      // Iterate over every item\n      for (var i = 0; i < dataLen; i++) {\n        item = list[i];\n        // Iterate over every key\n        for (j = 0; j < searchKeysLen; j++) {\n          analyzeText(options.getFn(item, searchKeys[j]), item, i);\n        }\n      }\n    }\n\n    if (options.shouldSort) {\n      rawResults.sort(options.sortFn);\n    }\n\n    // Helper function, here for speed-up, which replaces the item with its value,\n    // if the options specifies it,\n    var replaceValue = options.id ? function(i) {\n      rawResults[i].item = options.getFn(rawResults[i].item, options.id)[0];\n    } : function() {\n      return; // no-op\n    };\n\n    // Helper function, here for speed-up, which returns the\n    // item formatted based on the options.\n    var getItem = function(i) {\n      var resultItem;\n\n      if(options.include.length > 0) // If `include` has values, put the item under result.item\n      {\n        resultItem = {\n          item: rawResults[i].item,\n        };\n\n        // Then include the includes\n        for(var j = 0; j < options.include.length; j++)\n        {\n          var includeVal = options.include[j];\n          resultItem[includeVal] = rawResults[i][includeVal];\n        }\n      }\n      else\n      {\n        resultItem = rawResults[i].item;\n      }\n\n      return resultItem;\n    };\n\n    // From the results, push into a new array only the item identifier (if specified)\n    // of the entire item.  This is because we don't want to return the <rawResults>,\n    // since it contains other metadata;\n    for (var i = 0, len = rawResults.length; i < len; i++) {\n      replaceValue(i);\n      results.push(getItem(i));\n    }\n\n    return results;\n  };\n\n  // Export to Common JS Loader\n  if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = Fuse;\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(function() {\n      return Fuse;\n    });\n  } else {\n    // Browser globals (root is window)\n    global.Fuse = Fuse;\n  }\n\n})(this);\n"]}