{"version":3,"sources":["index.js","http.js","https.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nexports.http = require('./http.js');\nexports.https = require('./https.js');\n","\n\nvar net = require('net');\nvar util = require('util');\nvar EventEmitter = require('events').EventEmitter;\n\nvar debug;\n\nif (util.debuglog) {\n  debug = util.debuglog('http');\n} else {\n  debug = function (x) {\n    if (process.env.NODE_DEBUG && /http/.test(process.env.NODE_DEBUG)) {\n      console.error('HTTP: %s', x);\n    }\n  };\n}\n\n// New Agent code.\n\n// The largest departure from the previous implementation is that\n// an Agent instance holds connections for a variable number of host:ports.\n// Surprisingly, this is still API compatible as far as third parties are\n// concerned. The only code that really notices the difference is the\n// request object.\n\n// Another departure is that all code related to HTTP parsing is in\n// ClientRequest.onSocket(). The Agent is now *strictly*\n// concerned with managing a connection pool.\n\nfunction Agent(options) {\n  if (!(this instanceof Agent))\n    return new Agent(options);\n\n  EventEmitter.call(this);\n\n  var self = this;\n\n  self.defaultPort = 80;\n  self.protocol = 'http:';\n\n  self.options = util._extend({}, options);\n\n  // don't confuse net and make it think that we're connecting to a pipe\n  self.options.path = null;\n  self.requests = {};\n  self.sockets = {};\n  self.freeSockets = {};\n  self.keepAliveMsecs = self.options.keepAliveMsecs || 1000;\n  self.keepAlive = self.options.keepAlive || false;\n  self.maxSockets = self.options.maxSockets || Agent.defaultMaxSockets;\n  self.maxFreeSockets = self.options.maxFreeSockets || 256;\n\n  self.on('free', function(socket, options) {\n    var name = self.getName(options);\n    debug('agent.on(free)', name);\n\n    if (!socket.destroyed &&\n        self.requests[name] && self.requests[name].length) {\n      self.requests[name].shift().onSocket(socket);\n      if (self.requests[name].length === 0) {\n        // don't leak\n        delete self.requests[name];\n      }\n    } else {\n      // If there are no pending requests, then put it in\n      // the freeSockets pool, but only if we're allowed to do so.\n      var req = socket._httpMessage;\n      if (req &&\n          req.shouldKeepAlive &&\n          !socket.destroyed &&\n          self.options.keepAlive) {\n        var freeSockets = self.freeSockets[name];\n        var freeLen = freeSockets ? freeSockets.length : 0;\n        var count = freeLen;\n        if (self.sockets[name])\n          count += self.sockets[name].length;\n\n        if (count >= self.maxSockets || freeLen >= self.maxFreeSockets) {\n          self.removeSocket(socket, options);\n          socket.destroy();\n        } else {\n          freeSockets = freeSockets || [];\n          self.freeSockets[name] = freeSockets;\n          socket.setKeepAlive(true, self.keepAliveMsecs);\n          socket.unref();\n          socket._httpMessage = null;\n          self.removeSocket(socket, options);\n          freeSockets.push(socket);\n        }\n      } else {\n        self.removeSocket(socket, options);\n        socket.destroy();\n      }\n    }\n  });\n}\n\nutil.inherits(Agent, EventEmitter);\nexports.Agent = Agent;\n\nAgent.defaultMaxSockets = Infinity;\n\nAgent.prototype.createConnection = net.createConnection;\n\n// Get the key for a given set of request options\nAgent.prototype.getName = function(options) {\n  var name = '';\n\n  if (options.host)\n    name += options.host;\n  else\n    name += 'localhost';\n\n  name += ':';\n  if (options.port)\n    name += options.port;\n  name += ':';\n  if (options.localAddress)\n    name += options.localAddress;\n  name += ':';\n  return name;\n};\n\nAgent.prototype.addRequest = function(req, options) {\n  // Legacy API: addRequest(req, host, port, path)\n  if (typeof options === 'string') {\n    options = {\n      host: options,\n      port: arguments[2],\n      path: arguments[3]\n    };\n  }\n\n  // If we are not keepAlive agent and maxSockets is Infinity\n  // then disable shouldKeepAlive\n  if (!this.keepAlive && !Number.isFinite(this.maxSockets)) {\n    req._last = true;\n    req.shouldKeepAlive = false;\n  }\n\n  var name = this.getName(options);\n  if (!this.sockets[name]) {\n    this.sockets[name] = [];\n  }\n\n  var freeLen = this.freeSockets[name] ? this.freeSockets[name].length : 0;\n  var sockLen = freeLen + this.sockets[name].length;\n\n  if (freeLen) {\n    // we have a free socket, so use that.\n    var socket = this.freeSockets[name].shift();\n    debug('have free socket');\n\n    // don't leak\n    if (!this.freeSockets[name].length)\n      delete this.freeSockets[name];\n\n    socket.ref();\n    req.onSocket(socket);\n    this.sockets[name].push(socket);\n  } else if (sockLen < this.maxSockets) {\n    debug('call onSocket', sockLen, freeLen);\n    // If we are under maxSockets create a new one.\n    req.onSocket(this.createSocket(req, options));\n  } else {\n    debug('wait for socket');\n    // We are over limit so we'll add it to the queue.\n    if (!this.requests[name]) {\n      this.requests[name] = [];\n    }\n    this.requests[name].push(req);\n  }\n};\n\nAgent.prototype.createSocket = function(req, options) {\n  var self = this;\n  options = util._extend({}, options);\n  options = util._extend(options, self.options);\n\n  if (!options.servername) {\n    options.servername = options.host;\n    if (req) {\n      var hostHeader = req.getHeader('host');\n      if (hostHeader) {\n        options.servername = hostHeader.replace(/:.*$/, '');\n      }\n    }\n  }\n\n  var name = self.getName(options);\n\n  debug('createConnection', name, options);\n  options.encoding = null;\n  var s = self.createConnection(options);\n  if (!self.sockets[name]) {\n    self.sockets[name] = [];\n  }\n  this.sockets[name].push(s);\n  debug('sockets', name, this.sockets[name].length);\n\n  function onFree() {\n    self.emit('free', s, options);\n  }\n  s.on('free', onFree);\n\n  function onClose(err) {\n    debug('CLIENT socket onClose');\n    // This is the only place where sockets get removed from the Agent.\n    // If you want to remove a socket from the pool, just close it.\n    // All socket errors end in a close event anyway.\n    self.removeSocket(s, options);\n  }\n  s.on('close', onClose);\n\n  function onRemove() {\n    // We need this function for cases like HTTP 'upgrade'\n    // (defined by WebSockets) where we need to remove a socket from the\n    // pool because it'll be locked up indefinitely\n    debug('CLIENT socket onRemove');\n    self.removeSocket(s, options);\n    s.removeListener('close', onClose);\n    s.removeListener('free', onFree);\n    s.removeListener('agentRemove', onRemove);\n  }\n  s.on('agentRemove', onRemove);\n  return s;\n};\n\nAgent.prototype.removeSocket = function(s, options) {\n  var name = this.getName(options);\n  debug('removeSocket', name, 'destroyed:', s.destroyed);\n  var sets = [this.sockets];\n\n  // If the socket was destroyed, remove it from the free buffers too.\n  if (s.destroyed)\n    sets.push(this.freeSockets);\n\n  for (var sk = 0; sk < sets.length; sk++) {\n    var sockets = sets[sk];\n\n    if (sockets[name]) {\n      var index = sockets[name].indexOf(s);\n      if (index !== -1) {\n        sockets[name].splice(index, 1);\n        // Don't leak\n        if (sockets[name].length === 0)\n          delete sockets[name];\n      }\n    }\n  }\n\n  if (this.requests[name] && this.requests[name].length) {\n    debug('removeSocket, have a request, make a socket');\n    var req = this.requests[name][0];\n    // If we have pending requests and a socket gets closed make a new one\n    this.createSocket(req, options).emit('free');\n  }\n};\n\nAgent.prototype.destroy = function() {\n  var sets = [this.freeSockets, this.sockets];\n  for (var s = 0; s < sets.length; s++) {\n    var set = sets[s];\n    var keys = Object.keys(set);\n    for (var v = 0; v < keys.length; v++) {\n      var setName = set[keys[v]];\n      for (var n = 0; n < setName.length; n++) {\n        setName[n].destroy();\n      }\n    }\n  }\n};\n\nexports.globalAgent = new Agent();\n","\n\nvar tls = require('tls');\nvar http = require('./http.js');\nvar util = require('util');\nvar inherits = util.inherits;\n\nvar debug;\n\nif (util.debuglog) {\n  debug = util.debuglog('https');\n} else {\n  debug = function (x) {\n    if (process.env.NODE_DEBUG && /http/.test(process.env.NODE_DEBUG)) {\n      console.error('HTTPS: %s', x);\n    }\n  };\n}\nfunction createConnection(port, host, options) {\n  if (port !== null && typeof port === 'object') {\n    options = port;\n  } else if (host !== null && typeof host === 'object') {\n    options = host;\n  } else if (options === null || typeof options !== 'object') {\n    options = {};\n  }\n\n  if (typeof port === 'number') {\n    options.port = port;\n  }\n\n  if (typeof host === 'string') {\n    options.host = host;\n  }\n\n  debug('createConnection', options);\n  return tls.connect(options);\n}\n\n\nfunction Agent(options) {\n  http.Agent.call(this, options);\n  this.defaultPort = 443;\n  this.protocol = 'https:';\n}\ninherits(Agent, http.Agent);\nAgent.prototype.createConnection = createConnection;\n\nAgent.prototype.getName = function(options) {\n  var name = http.Agent.prototype.getName.call(this, options);\n\n  name += ':';\n  if (options.ca)\n    name += options.ca;\n\n  name += ':';\n  if (options.cert)\n    name += options.cert;\n\n  name += ':';\n  if (options.ciphers)\n    name += options.ciphers;\n\n  name += ':';\n  if (options.key)\n    name += options.key;\n\n  name += ':';\n  if (options.pfx)\n    name += options.pfx;\n\n  name += ':';\n  if (options.rejectUnauthorized !== undefined)\n    name += options.rejectUnauthorized;\n\n  return name;\n};\n\nvar globalAgent = new Agent();\n\nexports.globalAgent = globalAgent;\nexports.Agent = Agent;\n"]}