{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports[\"default\"] = function (_ref) {\n  var Plugin = _ref.Plugin;\n  var t = _ref.types;\n\n  function addDisplayName(id, call) {\n    var props = call.arguments[0].properties;\n    var safe = true;\n\n    for (var i = 0; i < props.length; i++) {\n      var prop = props[i];\n      var key = t.toComputedKey(prop);\n      if (t.isLiteral(key, { value: \"displayName\" })) {\n        safe = false;\n        break;\n      }\n    }\n\n    if (safe) {\n      props.unshift(t.property(\"init\", t.identifier(\"displayName\"), t.literal(id)));\n    }\n  }\n\n  var isCreateClassCallExpression = t.buildMatchMemberExpression(\"React.createClass\");\n\n  function isCreateClass(node) {\n    if (!node || !t.isCallExpression(node)) return false;\n\n    // not React.createClass call member object\n    if (!isCreateClassCallExpression(node.callee)) return false;\n\n    // no call arguments\n    var args = node.arguments;\n    if (args.length !== 1) return false;\n\n    // first node arg is not an object\n    var first = args[0];\n    if (!t.isObjectExpression(first)) return false;\n\n    return true;\n  }\n\n  return new Plugin(\"react-display-name\", {\n    metadata: {\n      group: \"builtin-pre\"\n    },\n\n    visitor: {\n      ExportDefaultDeclaration: function ExportDefaultDeclaration(node, parent, scope, file) {\n        if (isCreateClass(node.declaration)) {\n          addDisplayName(file.opts.basename, node.declaration);\n        }\n      },\n\n      \"AssignmentExpression|Property|VariableDeclarator\": function AssignmentExpressionPropertyVariableDeclarator(node) {\n        var left, right;\n\n        if (t.isAssignmentExpression(node)) {\n          left = node.left;\n          right = node.right;\n        } else if (t.isProperty(node)) {\n          left = node.key;\n          right = node.value;\n        } else if (t.isVariableDeclarator(node)) {\n          left = node.id;\n          right = node.init;\n        }\n\n        if (t.isMemberExpression(left)) {\n          left = left.property;\n        }\n\n        if (t.isIdentifier(left) && isCreateClass(right)) {\n          addDisplayName(left.name, right);\n        }\n      }\n    }\n  });\n};\n\nmodule.exports = exports[\"default\"];"]}