{"version":3,"sources":["myconf.js","utils.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _homeDir = require('home-dir');\n\nvar _homeDir2 = _interopRequireDefault(_homeDir);\n\nvar _utils = require('./utils');\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nrequire('babel/polyfill');\n\nvar _path2 = require('path');\n\nvar _path3 = _interopRequireDefault(_path2);\n\nvar dotFileRe = /^(\\.[^\\/]*)$/;\n\nvar Config = (function () {\n  function Config(filename) {\n    _classCallCheck(this, Config);\n\n    var validFilename = dotFileRe.test(filename);\n    if (!validFilename) {\n      return console.error('the filename \\'' + filename + '\\' is not valid');\n    }\n    this.filename = filename;\n    this.filepath = (0, _homeDir2['default'])(filename);\n    this.fileparser = 'json';\n  }\n\n  _createClass(Config, [{\n    key: 'path',\n    value: function path() {\n      var filepath = arguments.length <= 0 || arguments[0] === undefined ? (0, _homeDir2['default'])() : arguments[0];\n\n      this.filepath = _path3['default'].resolve(filepath + ('/' + this.filename));\n      return this;\n    }\n  }, {\n    key: 'parser',\n    value: function parser() {\n      var _parser = arguments.length <= 0 || arguments[0] === undefined ? 'json' : arguments[0];\n\n      this.fileparser = _parser;\n      return this;\n    }\n  }, {\n    key: 'get',\n    value: function get(key) {\n      var _this = this;\n\n      return new Promise(function callee$2$0(resolve, reject) {\n        var filedata;\n        return regeneratorRuntime.async(function callee$2$0$(context$3$0) {\n          while (1) switch (context$3$0.prev = context$3$0.next) {\n            case 0:\n              context$3$0.next = 2;\n              return regeneratorRuntime.awrap(_utils2['default'].readFile(this.filepath, this.fileparser));\n\n            case 2:\n              filedata = context$3$0.sent;\n\n              if (!key) {\n                context$3$0.next = 5;\n                break;\n              }\n\n              return context$3$0.abrupt('return', resolve(filedata && filedata[key]));\n\n            case 5:\n              return context$3$0.abrupt('return', resolve(filedata));\n\n            case 6:\n            case 'end':\n              return context$3$0.stop();\n          }\n        }, null, _this);\n      });\n    }\n  }, {\n    key: 'set',\n    value: function set(key, value) {\n      var _this2 = this;\n\n      return new Promise(function callee$2$0(resolve, reject) {\n        var filedata, prop;\n        return regeneratorRuntime.async(function callee$2$0$(context$3$0) {\n          while (1) switch (context$3$0.prev = context$3$0.next) {\n            case 0:\n              context$3$0.next = 2;\n              return regeneratorRuntime.awrap(_utils2['default'].readFile(this.filepath, this.fileparser));\n\n            case 2:\n              filedata = context$3$0.sent;\n\n              filedata = filedata ? filedata : {};\n              if (typeof key === 'object') {\n                for (prop in key) {\n                  filedata[prop] = key[prop];\n                }\n              } else if (typeof key === 'string') {\n                filedata[key] = value;\n              }\n              context$3$0.prev = 5;\n              context$3$0.next = 8;\n              return regeneratorRuntime.awrap(_utils2['default'].saveFile(this.filepath, filedata, this.fileparser));\n\n            case 8:\n              resolve(filedata);\n              context$3$0.next = 14;\n              break;\n\n            case 11:\n              context$3$0.prev = 11;\n              context$3$0.t0 = context$3$0['catch'](5);\n\n              console.error(context$3$0.t0);\n\n            case 14:\n            case 'end':\n              return context$3$0.stop();\n          }\n        }, null, _this2, [[5, 11]]);\n      });\n    }\n  }, {\n    key: 'save',\n    value: function save(filedata) {\n      var _this3 = this;\n\n      return new Promise(function callee$2$0(resolve, reject) {\n        return regeneratorRuntime.async(function callee$2$0$(context$3$0) {\n          while (1) switch (context$3$0.prev = context$3$0.next) {\n            case 0:\n              context$3$0.prev = 0;\n              context$3$0.next = 3;\n              return regeneratorRuntime.awrap(_utils2['default'].saveFile(this.filepath, filedata, this.fileparser));\n\n            case 3:\n              resolve(filedata);\n              context$3$0.next = 9;\n              break;\n\n            case 6:\n              context$3$0.prev = 6;\n              context$3$0.t0 = context$3$0['catch'](0);\n\n              console.error(context$3$0.t0);\n\n            case 9:\n            case 'end':\n              return context$3$0.stop();\n          }\n        }, null, _this3, [[0, 6]]);\n      });\n    }\n  }]);\n\n  return Config;\n})();\n\nexports['default'] = Config;\nmodule.exports = exports['default'];","\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _homeDir = require('home-dir');\n\nvar _homeDir2 = _interopRequireDefault(_homeDir);\n\nvar _pathExists = require('path-exists');\n\nvar _pathExists2 = _interopRequireDefault(_pathExists);\n\nvar _jsYaml = require('js-yaml');\n\nvar _jsYaml2 = _interopRequireDefault(_jsYaml);\n\nexports['default'] = {\n  readFile: function readFile(filepath, parser) {\n    return regeneratorRuntime.async(function readFile$(context$1$0) {\n      while (1) switch (context$1$0.prev = context$1$0.next) {\n        case 0:\n          return context$1$0.abrupt('return', new Promise(function (resolve, reject) {\n            (0, _pathExists2['default'])(filepath).then(function (exists) {\n              if (exists) {\n                var filedata = _fs2['default'].readFileSync(filepath, 'utf8');\n                if (parser === 'json') {\n                  filedata = JSON.parse(filedata);\n                } else if (parser === 'yaml') {\n                  filedata = _jsYaml2['default'].safeLoad(filedata);\n                }\n                return resolve(filedata);\n              }\n              return resolve(null);\n            });\n          }));\n\n        case 1:\n        case 'end':\n          return context$1$0.stop();\n      }\n    }, null, this);\n  },\n  saveFile: function saveFile(filepath, data, parser) {\n    return regeneratorRuntime.async(function saveFile$(context$1$0) {\n      while (1) switch (context$1$0.prev = context$1$0.next) {\n        case 0:\n          return context$1$0.abrupt('return', new Promise(function (resolve, reject) {\n            if (parser === 'json') {\n              data = JSON.stringify(data, null, 2);\n            } else if (parser === 'yaml') {\n              data = _jsYaml2['default'].safeDump(data);\n            }\n            filepath = _path2['default'].resolve(filepath);\n            _fs2['default'].writeFile(filepath, data, 'utf8', function (err) {\n              if (err) {\n                return reject(err);\n              }\n              return resolve(null);\n            });\n          }));\n\n        case 1:\n        case 'end':\n          return context$1$0.stop();\n      }\n    }, null, this);\n  }\n};\nmodule.exports = exports['default'];"]}