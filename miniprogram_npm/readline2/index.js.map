{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/**\n * Readline API fa√ßade to fix some issues\n * @Note: May look a bit like Monkey patching... if you know a better way let me know.\n */\n\n\nvar readline = require(\"readline\");\nvar MuteStream = require(\"mute-stream\");\nvar codePointAt = require(\"code-point-at\");\nvar isFullwidthCodePoint = require(\"is-fullwidth-code-point\");\n\nvar Interface = module.exports = {};\n\n\n/**\n * Create a readline interface\n * @param  {Object} opt Readline option hash\n * @return {readline}   the new readline interface\n */\n\nInterface.createInterface = function( opt ) {\n  opt || (opt = {});\n  var filteredOpt = opt;\n\n  // Default `input` to stdin\n  filteredOpt.input = opt.input || process.stdin;\n\n  // Add mute capabilities to the output\n  var ms = new MuteStream();\n  ms.pipe( opt.output || process.stdout );\n  filteredOpt.output = ms;\n\n  // Create the readline\n  var rl = readline.createInterface( filteredOpt );\n\n  // Fix bug with refreshLine\n  var _refreshLine = rl._refreshLine;\n  rl._refreshLine = function() {\n    _refreshLine.call(rl);\n\n    var line = this._prompt + this.line;\n    var cursorPos = this._getCursorPos();\n\n    readline.moveCursor(this.output, -line.length, 0);\n    readline.moveCursor(this.output, cursorPos.cols, 0);\n  };\n\n  // Returns current cursor's position and line\n  rl._getCursorPos = function() {\n    var columns = this.columns;\n    var strBeforeCursor = this._prompt + this.line.substring(0, this.cursor);\n    var dispPos = this._getDisplayPos(strBeforeCursor);\n    var cols = dispPos.cols;\n    var rows = dispPos.rows;\n    // If the cursor is on a full-width character which steps over the line,\n    // move the cursor to the beginning of the next line.\n    if (cols + 1 === columns &&\n        this.cursor < this.line.length &&\n        isFullwidthCodePoint(codePointAt(this.line, this.cursor))) {\n      rows++;\n      cols = 0;\n    }\n    return {cols: cols, rows: rows};\n  };\n\n  // Returns the last character's display position of the given string\n  rl._getDisplayPos = function(str) {\n    var offset = 0;\n    var col = this.columns;\n    var row = 0;\n    var code;\n    str = stripVTControlCharacters(str);\n    for (var i = 0, len = str.length; i < len; i++) {\n      code = codePointAt(str, i);\n      if (code >= 0x10000) { // surrogates\n        i++;\n      }\n      if (code === 0x0a) { // new line \\n\n        offset = 0;\n        row += 1;\n        continue;\n      }\n      if (isFullwidthCodePoint(code)) {\n        if ((offset + 1) % col === 0) {\n          offset++;\n        }\n        offset += 2;\n      } else {\n        offset++;\n      }\n    }\n    var cols = offset % col;\n    var rows = row + (offset - cols) / col;\n    return {cols: cols, rows: rows};\n  };\n\n  // Prevent arrows from breaking the question line\n  var origWrite = rl._ttyWrite;\n  rl._ttyWrite = function( s, key ) {\n    key || (key = {});\n\n    if ( key.name === \"up\" ) return;\n    if ( key.name === \"down\" ) return;\n\n    origWrite.apply( this, arguments );\n  };\n\n  return rl;\n};\n\n// Regexes used for ansi escape code splitting\nvar metaKeyCodeReAnywhere = /(?:\\x1b)([a-zA-Z0-9])/;\nvar functionKeyCodeReAnywhere = new RegExp('(?:\\x1b+)(O|N|\\\\[|\\\\[\\\\[)(?:' + [\n  '(\\\\d+)(?:;(\\\\d+))?([~^$])',\n  '(?:M([@ #!a`])(.)(.))', // mouse\n  '(?:1;)?(\\\\d+)?([a-zA-Z])'\n].join('|') + ')');\n\n/**\n * Tries to remove all VT control characters. Use to estimate displayed\n * string width. May be buggy due to not running a real state machine\n */\nfunction stripVTControlCharacters (str) {\n  str = str.replace(new RegExp(functionKeyCodeReAnywhere.source, 'g'), '');\n  return str.replace(new RegExp(metaKeyCodeReAnywhere.source, 'g'), '');\n}\n"]}