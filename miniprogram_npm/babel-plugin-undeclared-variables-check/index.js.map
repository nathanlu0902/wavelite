{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar _leven = require(\"leven\");\n\nvar _leven2 = _interopRequireDefault(_leven);\n\nexports[\"default\"] = function (_ref) {\n  var Plugin = _ref.Plugin;\n  var t = _ref.types;\n  var messages = _ref.messages;\n\n  return new Plugin(\"undeclared-variables-check\", {\n    metadata: {\n      group: \"builtin-pre\"\n    },\n\n    visitor: {\n      ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope) {\n        var binding = scope.getBinding(node.name);\n        if (binding && binding.kind === \"type\" && !this.parentPath.isFlow()) {\n          throw this.errorWithNode(messages.get(\"undeclaredVariableType\", node.name), ReferenceError);\n        }\n\n        if (scope.hasBinding(node.name)) return;\n\n        // get the closest declaration to offer as a suggestion\n        // the variable name may have just been mistyped\n\n        var bindings = scope.getAllBindings();\n\n        var closest;\n        var shortest = -1;\n\n        for (var name in bindings) {\n          var distance = (0, _leven2[\"default\"])(node.name, name);\n          if (distance <= 0 || distance > 3) continue;\n          if (distance <= shortest) continue;\n\n          closest = name;\n          shortest = distance;\n        }\n\n        var msg;\n        if (closest) {\n          msg = messages.get(\"undeclaredVariableSuggestion\", node.name, closest);\n        } else {\n          msg = messages.get(\"undeclaredVariable\", node.name);\n        }\n\n        //\n\n        throw this.errorWithNode(msg, ReferenceError);\n      }\n    }\n  });\n};\n\nmodule.exports = exports[\"default\"];"]}