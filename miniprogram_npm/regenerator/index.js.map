{"version":3,"sources":["main.js","lib/visit.js","lib/hoist.js","lib/emit.js","lib/leap.js","lib/util.js","lib/meta.js","runtime.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AGRA,ADGA,ADGA,ADGA;AGRA,ADGA,ADGA,ADGA;AGRA,ADGA,ADGA,ADGA;AGRA,ADGA,AENA,AHSA,ADGA;AGRA,ADGA,AENA,AHSA,ADGA;AGRA,ADGA,AENA,AHSA,ADGA;AGRA,ADGA,AENA,ACHA,AJYA,ADGA;AGRA,ADGA,AENA,ACHA,AJYA,ADGA;AGRA,ADGA,AENA,ACHA,AJYA,ADGA;AGRA,ADGA,AENA,AENA,ADGA,AJYA,ADGA;AGRA,ADGA,AENA,AENA,ADGA,AJYA,ADGA;AGRA,ADGA,AENA,AENA,ADGA,AJYA,ADGA;AGRA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ADGA,AJYA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ALeA,ADGA,AOrBA;AJaA,ADGA,AENA,AENA,ALeA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ADGA,AENA,AHSA,ADGA,AOrBA;AJaA,ACHA,AHSA,ADGA,AOrBA;AJaA,ACHA,AHSA,ADGA,AOrBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,ACHA,AHSA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AFMA,AMlBA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJafile":"index.js","sourcesContent":["/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\nvar assert = require(\"assert\");\nvar path = require(\"path\");\nvar fs = require(\"fs\");\nvar through = require(\"through\");\nvar transform = require(\"./lib/visit\").transform;\nvar utils = require(\"./lib/util\");\nvar recast = require(\"recast\");\nvar types = recast.types;\nvar genOrAsyncFunExp = /\\bfunction\\s*\\*|\\basync\\b/;\nvar blockBindingExp = /\\b(let|const)\\s+/;\n\nfunction exports(file, options) {\n  var data = [];\n  return through(write, end);\n\n  function write(buf) {\n    data.push(buf);\n  }\n\n  function end() {\n    this.queue(compile(data.join(\"\"), options).code);\n    this.queue(null);\n  }\n}\n\n// To get a writable stream for use as a browserify transform, call\n// require(\"regenerator\")().\nmodule.exports = exports;\n\n// To include the runtime globally in the current node process, call\n// require(\"regenerator\").runtime().\nfunction runtime() {\n  require(\"./runtime\");\n}\nexports.runtime = runtime;\nruntime.path = path.join(__dirname, \"runtime.js\");\n\nfunction compile(source, options) {\n  options = normalizeOptions(options);\n\n  if (!genOrAsyncFunExp.test(source)) {\n    return {\n      // Shortcut: no generators or async functions to transform.\n      code: (options.includeRuntime === true ? fs.readFileSync(\n        path.join(__dirname, \"runtime.js\"), \"utf-8\"\n      ) + \"\\n\" : \"\") + source\n    };\n  }\n\n  var recastOptions = getRecastOptions(options);\n  var ast = recast.parse(source, recastOptions);\n  var nodePath = new types.NodePath(ast);\n  var programPath = nodePath.get(\"program\");\n\n  if (shouldVarify(source, options)) {\n    // Transpile let/const into var declarations.\n    varifyAst(programPath.node);\n  }\n\n  transform(programPath, options);\n\n  return recast.print(nodePath, recastOptions);\n}\n\nfunction normalizeOptions(options) {\n  options = utils.defaults(options || {}, {\n    includeRuntime: false,\n    supportBlockBinding: true\n  });\n\n  if (!options.esprima) {\n    options.esprima = require(\"esprima-fb\");\n  }\n\n  assert.ok(\n    /harmony/.test(options.esprima.version),\n    \"Bad esprima version: \" + options.esprima.version\n  );\n\n  return options;\n}\n\nfunction getRecastOptions(options) {\n  var recastOptions = {\n    range: true\n  };\n\n  function copy(name) {\n    if (name in options) {\n      recastOptions[name] = options[name];\n    }\n  }\n\n  copy(\"esprima\");\n  copy(\"sourceFileName\");\n  copy(\"sourceMapName\");\n  copy(\"inputSourceMap\");\n  copy(\"sourceRoot\");\n\n  return recastOptions;\n}\n\nfunction shouldVarify(source, options) {\n  var supportBlockBinding = !!options.supportBlockBinding;\n  if (supportBlockBinding) {\n    if (!blockBindingExp.test(source)) {\n      supportBlockBinding = false;\n    }\n  }\n\n  return supportBlockBinding;\n}\n\nfunction varify(source, options) {\n  var recastOptions = getRecastOptions(normalizeOptions(options));\n  var ast = recast.parse(source, recastOptions);\n  varifyAst(ast.program);\n  return recast.print(ast, recastOptions).code;\n}\n\nfunction varifyAst(ast) {\n  types.namedTypes.Program.assert(ast);\n\n  var defsResult = require(\"defs\")(ast, {\n    ast: true,\n    disallowUnknownReferences: false,\n    disallowDuplicated: false,\n    disallowVars: false,\n    loopClosures: \"iife\"\n  });\n\n  if (defsResult.errors) {\n    throw new Error(defsResult.errors.join(\"\\n\"))\n  }\n\n  return ast;\n}\n\n// Convenience for just translating let/const to var declarations.\nexports.varify = varify;\n\n// Allow packages that depend on Regenerator to use the same copy of\n// ast-types, in case multiple versions are installed by NPM.\nexports.types = types;\n\n// Transforms a string of source code, returning the { code, map? } result\n// from recast.print.\nexports.compile = compile;\n\n// To modify an AST directly, call require(\"regenerator\").transform(ast).\nexports.transform = transform;\n","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\nvar assert = require(\"assert\");\nvar fs = require(\"fs\");\nvar recast = require(\"recast\");\nvar types = recast.types;\nvar n = types.namedTypes;\nvar b = types.builders;\nvar isArray = types.builtInTypes.array;\nvar isObject = types.builtInTypes.object;\nvar NodePath = types.NodePath;\nvar hoist = require(\"./hoist\").hoist;\nvar Emitter = require(\"./emit\").Emitter;\nvar util = require(\"./util\");\nvar runtimeProperty = util.runtimeProperty;\nvar getMarkInfo = require(\"private\").makeAccessor();\n\nexports.transform = function transform(node, options) {\n  options = options || {};\n\n  var path = node instanceof NodePath ? node : new NodePath(node);\n  visitor.visit(path, options);\n  node = path.value;\n\n  if (options.includeRuntime === true ||\n      (options.includeRuntime === 'if used' && visitor.wasChangeReported())) {\n    injectRuntime(n.File.check(node) ? node.program : node);\n  }\n\n  options.madeChanges = visitor.wasChangeReported();\n\n  return node;\n};\n\nfunction injectRuntime(program) {\n  n.Program.assert(program);\n\n  // Include the runtime by modifying the AST rather than by concatenating\n  // strings. This technique will allow for more accurate source mapping.\n  var runtimePath = require(\"..\").runtime.path;\n  var runtime = fs.readFileSync(runtimePath, \"utf8\");\n  var runtimeBody = recast.parse(runtime, {\n    sourceFileName: runtimePath\n  }).program.body;\n\n  var body = program.body;\n  body.unshift.apply(body, runtimeBody);\n}\n\nvar visitor = types.PathVisitor.fromMethodsObject({\n  reset: function(node, options) {\n    this.options = options;\n  },\n\n  visitFunction: function(path) {\n    // Calling this.traverse(path) first makes for a post-order traversal.\n    this.traverse(path);\n\n    var node = path.value;\n    var shouldTransformAsync = node.async && !this.options.disableAsync;\n\n    if (!node.generator && !shouldTransformAsync) {\n      return;\n    }\n\n    this.reportChanged();\n\n    if (node.expression) {\n      // Transform expression lambdas into normal functions.\n      node.expression = false;\n      node.body = b.blockStatement([\n        b.returnStatement(node.body)\n      ]);\n    }\n\n    if (shouldTransformAsync) {\n      awaitVisitor.visit(path.get(\"body\"));\n    }\n\n    var outerBody = [];\n    var innerBody = [];\n    var bodyPath = path.get(\"body\", \"body\");\n\n    bodyPath.each(function(childPath) {\n      var node = childPath.value;\n      if (node && node._blockHoist != null) {\n        outerBody.push(node);\n      } else {\n        innerBody.push(node);\n      }\n    });\n\n    if (outerBody.length > 0) {\n      // Only replace the inner body if we actually hoisted any statements\n      // to the outer body.\n      bodyPath.replace(innerBody);\n    }\n\n    var outerFnExpr = getOuterFnExpr(path);\n    // Note that getOuterFnExpr has the side-effect of ensuring that the\n    // function has a name (so node.id will always be an Identifier), even\n    // if a temporary name has to be synthesized.\n    n.Identifier.assert(node.id);\n    var innerFnId = b.identifier(node.id.name + \"$\");\n    var contextId = path.scope.declareTemporary(\"context$\");\n    var argsId = path.scope.declareTemporary(\"args$\");\n\n    // Turn all declarations into vars, and replace the original\n    // declarations with equivalent assignment expressions.\n    var vars = hoist(path);\n\n    var didRenameArguments = renameArguments(path, argsId);\n    if (didRenameArguments) {\n      vars = vars || b.variableDeclaration(\"var\", []);\n      vars.declarations.push(b.variableDeclarator(\n        argsId, b.identifier(\"arguments\")\n      ));\n    }\n\n    var emitter = new Emitter(contextId);\n    emitter.explode(path.get(\"body\"));\n\n    if (vars && vars.declarations.length > 0) {\n      outerBody.push(vars);\n    }\n\n    var wrapArgs = [\n      emitter.getContextFunction(innerFnId),\n      // Async functions that are not generators don't care about the\n      // outer function because they don't need it to be marked and don't\n      // inherit from its .prototype.\n      node.generator ? outerFnExpr : b.literal(null),\n      b.thisExpression()\n    ];\n\n    var tryLocsList = emitter.getTryLocsList();\n    if (tryLocsList) {\n      wrapArgs.push(tryLocsList);\n    }\n\n    var wrapCall = b.callExpression(\n      runtimeProperty(shouldTransformAsync ? \"async\" : \"wrap\"),\n      wrapArgs\n    );\n\n    outerBody.push(b.returnStatement(wrapCall));\n    node.body = b.blockStatement(outerBody);\n\n    var wasGeneratorFunction = node.generator;\n    if (wasGeneratorFunction) {\n      node.generator = false;\n    }\n\n    if (shouldTransformAsync) {\n      node.async = false;\n    }\n\n    if (wasGeneratorFunction &&\n        n.Expression.check(node)) {\n      return b.callExpression(runtimeProperty(\"mark\"), [node]);\n    }\n  },\n\n  visitForOfStatement: function(path) {\n    this.traverse(path);\n\n    var node = path.value;\n    var tempIterId = path.scope.declareTemporary(\"t$\");\n    var tempIterDecl = b.variableDeclarator(\n      tempIterId,\n      b.callExpression(\n        runtimeProperty(\"values\"),\n        [node.right]\n      )\n    );\n\n    var tempInfoId = path.scope.declareTemporary(\"t$\");\n    var tempInfoDecl = b.variableDeclarator(tempInfoId, null);\n\n    var init = node.left;\n    var loopId;\n    if (n.VariableDeclaration.check(init)) {\n      loopId = init.declarations[0].id;\n      init.declarations.push(tempIterDecl, tempInfoDecl);\n    } else {\n      loopId = init;\n      init = b.variableDeclaration(\"var\", [\n        tempIterDecl,\n        tempInfoDecl\n      ]);\n    }\n    n.Identifier.assert(loopId);\n\n    var loopIdAssignExprStmt = b.expressionStatement(\n      b.assignmentExpression(\n        \"=\",\n        loopId,\n        b.memberExpression(\n          tempInfoId,\n          b.identifier(\"value\"),\n          false\n        )\n      )\n    );\n\n    if (n.BlockStatement.check(node.body)) {\n      node.body.body.unshift(loopIdAssignExprStmt);\n    } else {\n      node.body = b.blockStatement([\n        loopIdAssignExprStmt,\n        node.body\n      ]);\n    }\n\n    return b.forStatement(\n      init,\n      b.unaryExpression(\n        \"!\",\n        b.memberExpression(\n          b.assignmentExpression(\n            \"=\",\n            tempInfoId,\n            b.callExpression(\n              b.memberExpression(\n                tempIterId,\n                b.identifier(\"next\"),\n                false\n              ),\n              []\n            )\n          ),\n          b.identifier(\"done\"),\n          false\n        )\n      ),\n      null,\n      node.body\n    );\n  }\n});\n\n// Given a NodePath for a Function, return an Expression node that can be\n// used to refer reliably to the function object from inside the function.\n// This expression is essentially a replacement for arguments.callee, with\n// the key advantage that it works in strict mode.\nfunction getOuterFnExpr(funPath) {\n  var node = funPath.value;\n  n.Function.assert(node);\n\n  if (node.generator && // Non-generator functions don't need to be marked.\n      n.FunctionDeclaration.check(node)) {\n    var pp = funPath.parent;\n\n    while (pp && !(n.BlockStatement.check(pp.value) ||\n                   n.Program.check(pp.value))) {\n      pp = pp.parent;\n    }\n\n    if (!pp) {\n      return node.id;\n    }\n\n    var markDecl = getRuntimeMarkDecl(pp);\n    var markedArray = markDecl.declarations[0].id;\n    var funDeclIdArray = markDecl.declarations[0].init.callee.object;\n    n.ArrayExpression.assert(funDeclIdArray);\n\n    var index = funDeclIdArray.elements.length;\n    funDeclIdArray.elements.push(node.id);\n\n    return b.memberExpression(\n      markedArray,\n      b.literal(index),\n      true\n    );\n  }\n\n  return node.id || (\n    node.id = funPath.scope.parent.declareTemporary(\"callee$\")\n  );\n}\n\nfunction getRuntimeMarkDecl(blockPath) {\n  assert.ok(blockPath instanceof NodePath);\n  var block = blockPath.node;\n  isArray.assert(block.body);\n\n  var info = getMarkInfo(block);\n  if (info.decl) {\n    return info.decl;\n  }\n\n  info.decl = b.variableDeclaration(\"var\", [\n    b.variableDeclarator(\n      blockPath.scope.declareTemporary(\"marked\"),\n      b.callExpression(\n        b.memberExpression(\n          b.arrayExpression([]),\n          b.identifier(\"map\"),\n          false\n        ),\n        [runtimeProperty(\"mark\")]\n      )\n    )\n  ]);\n\n  for (var i = 0; i < block.body.length; ++i) {\n    if (!shouldNotHoistAbove(blockPath.get(\"body\", i))) {\n      break;\n    }\n  }\n\n  blockPath.get(\"body\").insertAt(i, info.decl);\n\n  return info.decl;\n}\n\nfunction shouldNotHoistAbove(stmtPath) {\n  var value = stmtPath.value;\n  n.Statement.assert(value);\n\n  // If the first statement is a \"use strict\" declaration, make sure to\n  // insert hoisted declarations afterwards.\n  return n.ExpressionStatement.check(value) &&\n    n.Literal.check(value.expression) &&\n    value.expression.value === \"use strict\";\n}\n\nfunction renameArguments(funcPath, argsId) {\n  assert.ok(funcPath instanceof types.NodePath);\n  var func = funcPath.value;\n  var didRenameArguments = false;\n\n  recast.visit(funcPath, {\n    visitFunction: function(path) {\n      if (path.value === func) {\n        this.traverse(path);\n      } else {\n        return false;\n      }\n    },\n\n    visitIdentifier: function(path) {\n      if (path.value.name === \"arguments\" &&\n          util.isReference(path)) {\n        path.replace(argsId);\n        didRenameArguments = true;\n        return false;\n      }\n\n      this.traverse(path);\n    }\n  });\n\n  // If the traversal replaced any arguments references, then we need to\n  // alias the outer function's arguments binding (be it the implicit\n  // arguments object or some other parameter or variable) to the variable\n  // named by argsId.\n  return didRenameArguments;\n}\n\nvar awaitVisitor = types.PathVisitor.fromMethodsObject({\n  visitFunction: function(path) {\n    return false; // Don't descend into nested function scopes.\n  },\n\n  visitAwaitExpression: function(path) {\n    // Convert await and await* expressions to yield expressions.\n    var argument = path.value.argument;\n\n    // If the parser supports await* syntax using a boolean .all property\n    // (#171), desugar that syntax to yield Promise.all(argument).\n    if (path.value.all) {\n      argument = b.callExpression(\n        b.memberExpression(\n          b.identifier(\"Promise\"),\n          b.identifier(\"all\"),\n          false\n        ),\n        [argument]\n      );\n    }\n\n    // Transforming `await x` to `yield regeneratorRuntime.awrap(x)`\n    // causes the argument to be wrapped in such a way that the runtime\n    // can distinguish between awaited and merely yielded values.\n    return b.yieldExpression(\n      b.callExpression(\n        runtimeProperty(\"awrap\"),\n        [argument]\n      ),\n      false\n    );\n  }\n});\n","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\nvar assert = require(\"assert\");\nvar types = require(\"recast\").types;\nvar n = types.namedTypes;\nvar b = types.builders;\nvar hasOwn = Object.prototype.hasOwnProperty;\n\n// The hoist function takes a FunctionExpression or FunctionDeclaration\n// and replaces any Declaration nodes in its body with assignments, then\n// returns a VariableDeclaration containing just the names of the removed\n// declarations.\nexports.hoist = function(funPath) {\n  assert.ok(funPath instanceof types.NodePath);\n  n.Function.assert(funPath.value);\n\n  var vars = {};\n\n  function varDeclToExpr(vdec, includeIdentifiers) {\n    n.VariableDeclaration.assert(vdec);\n    var exprs = [];\n\n    vdec.declarations.forEach(function(dec) {\n      vars[dec.id.name] = dec.id;\n\n      if (dec.init) {\n        exprs.push(b.assignmentExpression(\n          \"=\", dec.id, dec.init\n        ));\n      } else if (includeIdentifiers) {\n        exprs.push(dec.id);\n      }\n    });\n\n    if (exprs.length === 0)\n      return null;\n\n    if (exprs.length === 1)\n      return exprs[0];\n\n    return b.sequenceExpression(exprs);\n  }\n\n  types.visit(funPath.get(\"body\"), {\n    visitVariableDeclaration: function(path) {\n      var expr = varDeclToExpr(path.value, false);\n      if (expr === null) {\n        path.replace();\n      } else {\n        // We don't need to traverse this expression any further because\n        // there can't be any new declarations inside an expression.\n        return b.expressionStatement(expr);\n      }\n\n      // Since the original node has been either removed or replaced,\n      // avoid traversing it any further.\n      return false;\n    },\n\n    visitForStatement: function(path) {\n      var init = path.value.init;\n      if (n.VariableDeclaration.check(init)) {\n        path.get(\"init\").replace(varDeclToExpr(init, false));\n      }\n      this.traverse(path);\n    },\n\n    visitForInStatement: function(path) {\n      var left = path.value.left;\n      if (n.VariableDeclaration.check(left)) {\n        path.get(\"left\").replace(varDeclToExpr(left, true));\n      }\n      this.traverse(path);\n    },\n\n    visitFunctionDeclaration: function(path) {\n      var node = path.value;\n      vars[node.id.name] = node.id;\n\n      var parentNode = path.parent.node;\n      var assignment = b.expressionStatement(\n        b.assignmentExpression(\n          \"=\",\n          node.id,\n          b.functionExpression(\n            node.id,\n            node.params,\n            node.body,\n            node.generator,\n            node.expression\n          )\n        )\n      );\n\n      if (n.BlockStatement.check(path.parent.node)) {\n        // Insert the assignment form before the first statement in the\n        // enclosing block.\n        path.parent.get(\"body\").unshift(assignment);\n\n        // Remove the function declaration now that we've inserted the\n        // equivalent assignment form at the beginning of the block.\n        path.replace();\n\n      } else {\n        // If the parent node is not a block statement, then we can just\n        // replace the declaration with the equivalent assignment form\n        // without worrying about hoisting it.\n        path.replace(assignment);\n      }\n\n      // Don't hoist variables out of inner functions.\n      return false;\n    },\n\n    visitFunctionExpression: function(path) {\n      // Don't descend into nested function expressions.\n      return false;\n    }\n  });\n\n  var paramNames = {};\n  funPath.get(\"params\").each(function(paramPath) {\n    var param = paramPath.value;\n    if (n.Identifier.check(param)) {\n      paramNames[param.name] = param;\n    } else {\n      // Variables declared by destructuring parameter patterns will be\n      // harmlessly re-declared.\n    }\n  });\n\n  var declarations = [];\n\n  Object.keys(vars).forEach(function(name) {\n    if (!hasOwn.call(paramNames, name)) {\n      declarations.push(b.variableDeclarator(vars[name], null));\n    }\n  });\n\n  if (declarations.length === 0) {\n    return null; // Be sure to handle this case!\n  }\n\n  return b.variableDeclaration(\"var\", declarations);\n};\n","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\nvar assert = require(\"assert\");\nvar types = require(\"recast\").types;\nvar isArray = types.builtInTypes.array;\nvar b = types.builders;\nvar n = types.namedTypes;\nvar leap = require(\"./leap\");\nvar meta = require(\"./meta\");\nvar util = require(\"./util\");\nvar runtimeProperty = util.runtimeProperty;\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction Emitter(contextId) {\n  assert.ok(this instanceof Emitter);\n  n.Identifier.assert(contextId);\n\n  // Used to generate unique temporary names.\n  this.nextTempId = 0;\n\n  Object.defineProperties(this, {\n    // In order to make sure the context object does not collide with\n    // anything in the local scope, we might have to rename it, so we\n    // refer to it symbolically instead of just assuming that it will be\n    // called \"context\".\n    contextId: { value: contextId },\n\n    // An append-only list of Statements that grows each time this.emit is\n    // called.\n    listing: { value: [] },\n\n    // A sparse array whose keys correspond to locations in this.listing\n    // that have been marked as branch/jump targets.\n    marked: { value: [true] },\n\n    // The last location will be marked when this.getDispatchLoop is\n    // called.\n    finalLoc: { value: loc() },\n\n    // A list of all leap.TryEntry statements emitted.\n    tryEntries: { value: [] }\n  });\n\n  // The .leapManager property needs to be defined by a separate\n  // defineProperties call so that .finalLoc will be visible to the\n  // leap.LeapManager constructor.\n  Object.defineProperties(this, {\n    // Each time we evaluate the body of a loop, we tell this.leapManager\n    // to enter a nested loop context that determines the meaning of break\n    // and continue statements therein.\n    leapManager: { value: new leap.LeapManager(this) }\n  });\n}\n\nvar Ep = Emitter.prototype;\nexports.Emitter = Emitter;\n\n// Offsets into this.listing that could be used as targets for branches or\n// jumps are represented as numeric Literal nodes. This representation has\n// the amazingly convenient benefit of allowing the exact value of the\n// location to be determined at any time, even after generating code that\n// refers to the location.\nfunction loc() {\n  return b.literal(-1);\n}\n\n// Sets the exact value of the given location to the offset of the next\n// Statement emitted.\nEp.mark = function(loc) {\n  n.Literal.assert(loc);\n  var index = this.listing.length;\n  if (loc.value === -1) {\n    loc.value = index;\n  } else {\n    // Locations can be marked redundantly, but their values cannot change\n    // once set the first time.\n    assert.strictEqual(loc.value, index);\n  }\n  this.marked[index] = true;\n  return loc;\n};\n\nEp.emit = function(node) {\n  if (n.Expression.check(node))\n    node = b.expressionStatement(node);\n  n.Statement.assert(node);\n  this.listing.push(node);\n};\n\n// Shorthand for emitting assignment statements. This will come in handy\n// for assignments to temporary variables.\nEp.emitAssign = function(lhs, rhs) {\n  this.emit(this.assign(lhs, rhs));\n  return lhs;\n};\n\n// Shorthand for an assignment statement.\nEp.assign = function(lhs, rhs) {\n  return b.expressionStatement(\n    b.assignmentExpression(\"=\", lhs, rhs));\n};\n\n// Convenience function for generating expressions like context.next,\n// context.sent, and context.rval.\nEp.contextProperty = function(name, computed) {\n  return b.memberExpression(\n    this.contextId,\n    computed ? b.literal(name) : b.identifier(name),\n    !!computed\n  );\n};\n\n// Shorthand for setting context.rval and jumping to `context.stop()`.\nEp.stop = function(rval) {\n  if (rval) {\n    this.setReturnValue(rval);\n  }\n\n  this.jump(this.finalLoc);\n};\n\nEp.setReturnValue = function(valuePath) {\n  n.Expression.assert(valuePath.value);\n\n  this.emitAssign(\n    this.contextProperty(\"rval\"),\n    this.explodeExpression(valuePath)\n  );\n};\n\nEp.clearPendingException = function(tryLoc, assignee) {\n  n.Literal.assert(tryLoc);\n\n  var catchCall = b.callExpression(\n    this.contextProperty(\"catch\", true),\n    [tryLoc]\n  );\n\n  if (assignee) {\n    this.emitAssign(assignee, catchCall);\n  } else {\n    this.emit(catchCall);\n  }\n};\n\n// Emits code for an unconditional jump to the given location, even if the\n// exact value of the location is not yet known.\nEp.jump = function(toLoc) {\n  this.emitAssign(this.contextProperty(\"next\"), toLoc);\n  this.emit(b.breakStatement());\n};\n\n// Conditional jump.\nEp.jumpIf = function(test, toLoc) {\n  n.Expression.assert(test);\n  n.Literal.assert(toLoc);\n\n  this.emit(b.ifStatement(\n    test,\n    b.blockStatement([\n      this.assign(this.contextProperty(\"next\"), toLoc),\n      b.breakStatement()\n    ])\n  ));\n};\n\n// Conditional jump, with the condition negated.\nEp.jumpIfNot = function(test, toLoc) {\n  n.Expression.assert(test);\n  n.Literal.assert(toLoc);\n\n  var negatedTest;\n  if (n.UnaryExpression.check(test) &&\n      test.operator === \"!\") {\n    // Avoid double negation.\n    negatedTest = test.argument;\n  } else {\n    negatedTest = b.unaryExpression(\"!\", test);\n  }\n\n  this.emit(b.ifStatement(\n    negatedTest,\n    b.blockStatement([\n      this.assign(this.contextProperty(\"next\"), toLoc),\n      b.breakStatement()\n    ])\n  ));\n};\n\n// Returns a unique MemberExpression that can be used to store and\n// retrieve temporary values. Since the object of the member expression is\n// the context object, which is presumed to coexist peacefully with all\n// other local variables, and since we just increment `nextTempId`\n// monotonically, uniqueness is assured.\nEp.makeTempVar = function() {\n  return this.contextProperty(\"t\" + this.nextTempId++);\n};\n\nEp.getContextFunction = function(id) {\n  return b.functionExpression(\n    id || null/*Anonymous*/,\n    [this.contextId],\n    b.blockStatement([this.getDispatchLoop()]),\n    false, // Not a generator anymore!\n    false // Nor an expression.\n  );\n};\n\n// Turns this.listing into a loop of the form\n//\n//   while (1) switch (context.next) {\n//   case 0:\n//   ...\n//   case n:\n//     return context.stop();\n//   }\n//\n// Each marked location in this.listing will correspond to one generated\n// case statement.\nEp.getDispatchLoop = function() {\n  var self = this;\n  var cases = [];\n  var current;\n\n  // If we encounter a break, continue, or return statement in a switch\n  // case, we can skip the rest of the statements until the next case.\n  var alreadyEnded = false;\n\n  self.listing.forEach(function(stmt, i) {\n    if (self.marked.hasOwnProperty(i)) {\n      cases.push(b.switchCase(\n        b.literal(i),\n        current = []));\n      alreadyEnded = false;\n    }\n\n    if (!alreadyEnded) {\n      current.push(stmt);\n      if (isSwitchCaseEnder(stmt))\n        alreadyEnded = true;\n    }\n  });\n\n  // Now that we know how many statements there will be in this.listing,\n  // we can finally resolve this.finalLoc.value.\n  this.finalLoc.value = this.listing.length;\n\n  cases.push(\n    b.switchCase(this.finalLoc, [\n      // Intentionally fall through to the \"end\" case...\n    ]),\n\n    // So that the runtime can jump to the final location without having\n    // to know its offset, we provide the \"end\" case as a synonym.\n    b.switchCase(b.literal(\"end\"), [\n      // This will check/clear both context.thrown and context.rval.\n      b.returnStatement(\n        b.callExpression(this.contextProperty(\"stop\"), [])\n      )\n    ])\n  );\n\n  return b.whileStatement(\n    b.literal(1),\n    b.switchStatement(\n      b.assignmentExpression(\n        \"=\",\n        this.contextProperty(\"prev\"),\n        this.contextProperty(\"next\")\n      ),\n      cases\n    )\n  );\n};\n\n// See comment above re: alreadyEnded.\nfunction isSwitchCaseEnder(stmt) {\n  return n.BreakStatement.check(stmt)\n      || n.ContinueStatement.check(stmt)\n      || n.ReturnStatement.check(stmt)\n      || n.ThrowStatement.check(stmt);\n}\n\nEp.getTryLocsList = function() {\n  if (this.tryEntries.length === 0) {\n    // To avoid adding a needless [] to the majority of runtime.wrap\n    // argument lists, force the caller to handle this case specially.\n    return null;\n  }\n\n  var lastLocValue = 0;\n\n  return b.arrayExpression(\n    this.tryEntries.map(function(tryEntry) {\n      var thisLocValue = tryEntry.firstLoc.value;\n      assert.ok(thisLocValue >= lastLocValue, \"try entries out of order\");\n      lastLocValue = thisLocValue;\n\n      var ce = tryEntry.catchEntry;\n      var fe = tryEntry.finallyEntry;\n\n      var locs = [\n        tryEntry.firstLoc,\n        // The null here makes a hole in the array.\n        ce ? ce.firstLoc : null\n      ];\n\n      if (fe) {\n        locs[2] = fe.firstLoc;\n        locs[3] = fe.afterLoc;\n      }\n\n      return b.arrayExpression(locs);\n    })\n  );\n};\n\n// All side effects must be realized in order.\n\n// If any subexpression harbors a leap, all subexpressions must be\n// neutered of side effects.\n\n// No destructive modification of AST nodes.\n\nEp.explode = function(path, ignoreResult) {\n  assert.ok(path instanceof types.NodePath);\n\n  var node = path.value;\n  var self = this;\n\n  n.Node.assert(node);\n\n  if (n.Statement.check(node))\n    return self.explodeStatement(path);\n\n  if (n.Expression.check(node))\n    return self.explodeExpression(path, ignoreResult);\n\n  if (n.Declaration.check(node))\n    throw getDeclError(node);\n\n  switch (node.type) {\n  case \"Program\":\n    return path.get(\"body\").map(\n      self.explodeStatement,\n      self\n    );\n\n  case \"VariableDeclarator\":\n    throw getDeclError(node);\n\n  // These node types should be handled by their parent nodes\n  // (ObjectExpression, SwitchStatement, and TryStatement, respectively).\n  case \"Property\":\n  case \"SwitchCase\":\n  case \"CatchClause\":\n    throw new Error(\n      node.type + \" nodes should be handled by their parents\");\n\n  default:\n    throw new Error(\n      \"unknown Node of type \" +\n        JSON.stringify(node.type));\n  }\n};\n\nfunction getDeclError(node) {\n  return new Error(\n    \"all declarations should have been transformed into \" +\n    \"assignments before the Exploder began its work: \" +\n    JSON.stringify(node));\n}\n\nEp.explodeStatement = function(path, labelId) {\n  assert.ok(path instanceof types.NodePath);\n\n  var stmt = path.value;\n  var self = this;\n\n  n.Statement.assert(stmt);\n\n  if (labelId) {\n    n.Identifier.assert(labelId);\n  } else {\n    labelId = null;\n  }\n\n  // Explode BlockStatement nodes even if they do not contain a yield,\n  // because we don't want or need the curly braces.\n  if (n.BlockStatement.check(stmt)) {\n    return path.get(\"body\").each(\n      self.explodeStatement,\n      self\n    );\n  }\n\n  if (!meta.containsLeap(stmt)) {\n    // Technically we should be able to avoid emitting the statement\n    // altogether if !meta.hasSideEffects(stmt), but that leads to\n    // confusing generated code (for instance, `while (true) {}` just\n    // disappears) and is probably a more appropriate job for a dedicated\n    // dead code elimination pass.\n    self.emit(stmt);\n    return;\n  }\n\n  switch (stmt.type) {\n  case \"ExpressionStatement\":\n    self.explodeExpression(path.get(\"expression\"), true);\n    break;\n\n  case \"LabeledStatement\":\n    var after = loc();\n\n    // Did you know you can break from any labeled block statement or\n    // control structure? Well, you can! Note: when a labeled loop is\n    // encountered, the leap.LabeledEntry created here will immediately\n    // enclose a leap.LoopEntry on the leap manager's stack, and both\n    // entries will have the same label. Though this works just fine, it\n    // may seem a bit redundant. In theory, we could check here to\n    // determine if stmt knows how to handle its own label; for example,\n    // stmt happens to be a WhileStatement and so we know it's going to\n    // establish its own LoopEntry when we explode it (below). Then this\n    // LabeledEntry would be unnecessary. Alternatively, we might be\n    // tempted not to pass stmt.label down into self.explodeStatement,\n    // because we've handled the label here, but that's a mistake because\n    // labeled loops may contain labeled continue statements, which is not\n    // something we can handle in this generic case. All in all, I think a\n    // little redundancy greatly simplifies the logic of this case, since\n    // it's clear that we handle all possible LabeledStatements correctly\n    // here, regardless of whether they interact with the leap manager\n    // themselves. Also remember that labels and break/continue-to-label\n    // statements are rare, and all of this logic happens at transform\n    // time, so it has no additional runtime cost.\n    self.leapManager.withEntry(\n      new leap.LabeledEntry(after, stmt.label),\n      function() {\n        self.explodeStatement(path.get(\"body\"), stmt.label);\n      }\n    );\n\n    self.mark(after);\n\n    break;\n\n  case \"WhileStatement\":\n    var before = loc();\n    var after = loc();\n\n    self.mark(before);\n    self.jumpIfNot(self.explodeExpression(path.get(\"test\")), after);\n    self.leapManager.withEntry(\n      new leap.LoopEntry(after, before, labelId),\n      function() { self.explodeStatement(path.get(\"body\")); }\n    );\n    self.jump(before);\n    self.mark(after);\n\n    break;\n\n  case \"DoWhileStatement\":\n    var first = loc();\n    var test = loc();\n    var after = loc();\n\n    self.mark(first);\n    self.leapManager.withEntry(\n      new leap.LoopEntry(after, test, labelId),\n      function() { self.explode(path.get(\"body\")); }\n    );\n    self.mark(test);\n    self.jumpIf(self.explodeExpression(path.get(\"test\")), first);\n    self.mark(after);\n\n    break;\n\n  case \"ForStatement\":\n    var head = loc();\n    var update = loc();\n    var after = loc();\n\n    if (stmt.init) {\n      // We pass true here to indicate that if stmt.init is an expression\n      // then we do not care about its result.\n      self.explode(path.get(\"init\"), true);\n    }\n\n    self.mark(head);\n\n    if (stmt.test) {\n      self.jumpIfNot(self.explodeExpression(path.get(\"test\")), after);\n    } else {\n      // No test means continue unconditionally.\n    }\n\n    self.leapManager.withEntry(\n      new leap.LoopEntry(after, update, labelId),\n      function() { self.explodeStatement(path.get(\"body\")); }\n    );\n\n    self.mark(update);\n\n    if (stmt.update) {\n      // We pass true here to indicate that if stmt.update is an\n      // expression then we do not care about its result.\n      self.explode(path.get(\"update\"), true);\n    }\n\n    self.jump(head);\n\n    self.mark(after);\n\n    break;\n\n  case \"ForInStatement\":\n    var head = loc();\n    var after = loc();\n\n    var keyIterNextFn = self.makeTempVar();\n    self.emitAssign(\n      keyIterNextFn,\n      b.callExpression(\n        runtimeProperty(\"keys\"),\n        [self.explodeExpression(path.get(\"right\"))]\n      )\n    );\n\n    self.mark(head);\n\n    var keyInfoTmpVar = self.makeTempVar();\n    self.jumpIf(\n      b.memberExpression(\n        b.assignmentExpression(\n          \"=\",\n          keyInfoTmpVar,\n          b.callExpression(keyIterNextFn, [])\n        ),\n        b.identifier(\"done\"),\n        false\n      ),\n      after\n    );\n\n    self.emitAssign(\n      stmt.left,\n      b.memberExpression(\n        keyInfoTmpVar,\n        b.identifier(\"value\"),\n        false\n      )\n    );\n\n    self.leapManager.withEntry(\n      new leap.LoopEntry(after, head, labelId),\n      function() { self.explodeStatement(path.get(\"body\")); }\n    );\n\n    self.jump(head);\n\n    self.mark(after);\n\n    break;\n\n  case \"BreakStatement\":\n    self.emitAbruptCompletion({\n      type: \"break\",\n      target: self.leapManager.getBreakLoc(stmt.label)\n    });\n\n    break;\n\n  case \"ContinueStatement\":\n    self.emitAbruptCompletion({\n      type: \"continue\",\n      target: self.leapManager.getContinueLoc(stmt.label)\n    });\n\n    break;\n\n  case \"SwitchStatement\":\n    // Always save the discriminant into a temporary variable in case the\n    // test expressions overwrite values like context.sent.\n    var disc = self.emitAssign(\n      self.makeTempVar(),\n      self.explodeExpression(path.get(\"discriminant\"))\n    );\n\n    var after = loc();\n    var defaultLoc = loc();\n    var condition = defaultLoc;\n    var caseLocs = [];\n\n    // If there are no cases, .cases might be undefined.\n    var cases = stmt.cases || [];\n\n    for (var i = cases.length - 1; i >= 0; --i) {\n      var c = cases[i];\n      n.SwitchCase.assert(c);\n\n      if (c.test) {\n        condition = b.conditionalExpression(\n          b.binaryExpression(\"===\", disc, c.test),\n          caseLocs[i] = loc(),\n          condition\n        );\n      } else {\n        caseLocs[i] = defaultLoc;\n      }\n    }\n\n    self.jump(self.explodeExpression(\n      new types.NodePath(condition, path, \"discriminant\")\n    ));\n\n    self.leapManager.withEntry(\n      new leap.SwitchEntry(after),\n      function() {\n        path.get(\"cases\").each(function(casePath) {\n          var c = casePath.value;\n          var i = casePath.name;\n\n          self.mark(caseLocs[i]);\n\n          casePath.get(\"consequent\").each(\n            self.explodeStatement,\n            self\n          );\n        });\n      }\n    );\n\n    self.mark(after);\n    if (defaultLoc.value === -1) {\n      self.mark(defaultLoc);\n      assert.strictEqual(after.value, defaultLoc.value);\n    }\n\n    break;\n\n  case \"IfStatement\":\n    var elseLoc = stmt.alternate && loc();\n    var after = loc();\n\n    self.jumpIfNot(\n      self.explodeExpression(path.get(\"test\")),\n      elseLoc || after\n    );\n\n    self.explodeStatement(path.get(\"consequent\"));\n\n    if (elseLoc) {\n      self.jump(after);\n      self.mark(elseLoc);\n      self.explodeStatement(path.get(\"alternate\"));\n    }\n\n    self.mark(after);\n\n    break;\n\n  case \"ReturnStatement\":\n    self.emitAbruptCompletion({\n      type: \"return\",\n      value: self.explodeExpression(path.get(\"argument\"))\n    });\n\n    break;\n\n  case \"WithStatement\":\n    throw new Error(\n      node.type + \" not supported in generator functions.\");\n\n  case \"TryStatement\":\n    var after = loc();\n\n    var handler = stmt.handler;\n    if (!handler && stmt.handlers) {\n      handler = stmt.handlers[0] || null;\n    }\n\n    var catchLoc = handler && loc();\n    var catchEntry = catchLoc && new leap.CatchEntry(\n      catchLoc,\n      handler.param\n    );\n\n    var finallyLoc = stmt.finalizer && loc();\n    var finallyEntry = finallyLoc &&\n      new leap.FinallyEntry(finallyLoc, after);\n\n    var tryEntry = new leap.TryEntry(\n      self.getUnmarkedCurrentLoc(),\n      catchEntry,\n      finallyEntry\n    );\n\n    self.tryEntries.push(tryEntry);\n    self.updateContextPrevLoc(tryEntry.firstLoc);\n\n    self.leapManager.withEntry(tryEntry, function() {\n      self.explodeStatement(path.get(\"block\"));\n\n      if (catchLoc) {\n        if (finallyLoc) {\n          // If we have both a catch block and a finally block, then\n          // because we emit the catch block first, we need to jump over\n          // it to the finally block.\n          self.jump(finallyLoc);\n\n        } else {\n          // If there is no finally block, then we need to jump over the\n          // catch block to the fall-through location.\n          self.jump(after);\n        }\n\n        self.updateContextPrevLoc(self.mark(catchLoc));\n\n        var bodyPath = path.get(\"handler\", \"body\");\n        var safeParam = self.makeTempVar();\n        self.clearPendingException(tryEntry.firstLoc, safeParam);\n\n        var catchScope = bodyPath.scope;\n        var catchParamName = handler.param.name;\n        n.CatchClause.assert(catchScope.node);\n        assert.strictEqual(catchScope.lookup(catchParamName), catchScope);\n\n        types.visit(bodyPath, {\n          visitIdentifier: function(path) {\n            if (util.isReference(path, catchParamName) &&\n                path.scope.lookup(catchParamName) === catchScope) {\n              return safeParam;\n            }\n\n            this.traverse(path);\n          },\n\n          visitFunction: function(path) {\n            if (path.scope.declares(catchParamName)) {\n              // Don't descend into nested scopes that shadow the catch\n              // parameter with their own declarations. This isn't\n              // logically necessary because of the path.scope.lookup we\n              // do in visitIdentifier, but it saves time.\n              return false;\n            }\n\n            this.traverse(path);\n          }\n        });\n\n        self.leapManager.withEntry(catchEntry, function() {\n          self.explodeStatement(bodyPath);\n        });\n      }\n\n      if (finallyLoc) {\n        self.updateContextPrevLoc(self.mark(finallyLoc));\n\n        self.leapManager.withEntry(finallyEntry, function() {\n          self.explodeStatement(path.get(\"finalizer\"));\n        });\n\n        self.emit(b.returnStatement(b.callExpression(\n          self.contextProperty(\"finish\"),\n          [finallyEntry.firstLoc]\n        )));\n      }\n    });\n\n    self.mark(after);\n\n    break;\n\n  case \"ThrowStatement\":\n    self.emit(b.throwStatement(\n      self.explodeExpression(path.get(\"argument\"))\n    ));\n\n    break;\n\n  default:\n    throw new Error(\n      \"unknown Statement of type \" +\n        JSON.stringify(stmt.type));\n  }\n};\n\nEp.emitAbruptCompletion = function(record) {\n  if (!isValidCompletion(record)) {\n    assert.ok(\n      false,\n      \"invalid completion record: \" +\n        JSON.stringify(record)\n    );\n  }\n\n  assert.notStrictEqual(\n    record.type, \"normal\",\n    \"normal completions are not abrupt\"\n  );\n\n  var abruptArgs = [b.literal(record.type)];\n\n  if (record.type === \"break\" ||\n      record.type === \"continue\") {\n    n.Literal.assert(record.target);\n    abruptArgs[1] = record.target;\n  } else if (record.type === \"return\" ||\n             record.type === \"throw\") {\n    if (record.value) {\n      n.Expression.assert(record.value);\n      abruptArgs[1] = record.value;\n    }\n  }\n\n  this.emit(\n    b.returnStatement(\n      b.callExpression(\n        this.contextProperty(\"abrupt\"),\n        abruptArgs\n      )\n    )\n  );\n};\n\nfunction isValidCompletion(record) {\n  var type = record.type;\n\n  if (type === \"normal\") {\n    return !hasOwn.call(record, \"target\");\n  }\n\n  if (type === \"break\" ||\n      type === \"continue\") {\n    return !hasOwn.call(record, \"value\")\n        && n.Literal.check(record.target);\n  }\n\n  if (type === \"return\" ||\n      type === \"throw\") {\n    return hasOwn.call(record, \"value\")\n        && !hasOwn.call(record, \"target\");\n  }\n\n  return false;\n}\n\n\n// Not all offsets into emitter.listing are potential jump targets. For\n// example, execution typically falls into the beginning of a try block\n// without jumping directly there. This method returns the current offset\n// without marking it, so that a switch case will not necessarily be\n// generated for this offset (I say \"not necessarily\" because the same\n// location might end up being marked in the process of emitting other\n// statements). There's no logical harm in marking such locations as jump\n// targets, but minimizing the number of switch cases keeps the generated\n// code shorter.\nEp.getUnmarkedCurrentLoc = function() {\n  return b.literal(this.listing.length);\n};\n\n// The context.prev property takes the value of context.next whenever we\n// evaluate the switch statement discriminant, which is generally good\n// enough for tracking the last location we jumped to, but sometimes\n// context.prev needs to be more precise, such as when we fall\n// successfully out of a try block and into a finally block without\n// jumping. This method exists to update context.prev to the freshest\n// available location. If we were implementing a full interpreter, we\n// would know the location of the current instruction with complete\n// precision at all times, but we don't have that luxury here, as it would\n// be costly and verbose to set context.prev before every statement.\nEp.updateContextPrevLoc = function(loc) {\n  if (loc) {\n    n.Literal.assert(loc);\n\n    if (loc.value === -1) {\n      // If an uninitialized location literal was passed in, set its value\n      // to the current this.listing.length.\n      loc.value = this.listing.length;\n    } else {\n      // Otherwise assert that the location matches the current offset.\n      assert.strictEqual(loc.value, this.listing.length);\n    }\n\n  } else {\n    loc = this.getUnmarkedCurrentLoc();\n  }\n\n  // Make sure context.prev is up to date in case we fell into this try\n  // statement without jumping to it. TODO Consider avoiding this\n  // assignment when we know control must have jumped here.\n  this.emitAssign(this.contextProperty(\"prev\"), loc);\n};\n\nEp.explodeExpression = function(path, ignoreResult) {\n  assert.ok(path instanceof types.NodePath);\n\n  var expr = path.value;\n  if (expr) {\n    n.Expression.assert(expr);\n  } else {\n    return expr;\n  }\n\n  var self = this;\n  var result; // Used optionally by several cases below.\n\n  function finish(expr) {\n    n.Expression.assert(expr);\n    if (ignoreResult) {\n      self.emit(expr);\n    } else {\n      return expr;\n    }\n  }\n\n  // If the expression does not contain a leap, then we either emit the\n  // expression as a standalone statement or return it whole.\n  if (!meta.containsLeap(expr)) {\n    return finish(expr);\n  }\n\n  // If any child contains a leap (such as a yield or labeled continue or\n  // break statement), then any sibling subexpressions will almost\n  // certainly have to be exploded in order to maintain the order of their\n  // side effects relative to the leaping child(ren).\n  var hasLeapingChildren = meta.containsLeap.onlyChildren(expr);\n\n  // In order to save the rest of explodeExpression from a combinatorial\n  // trainwreck of special cases, explodeViaTempVar is responsible for\n  // deciding when a subexpression needs to be \"exploded,\" which is my\n  // very technical term for emitting the subexpression as an assignment\n  // to a temporary variable and the substituting the temporary variable\n  // for the original subexpression. Think of exploded view diagrams, not\n  // Michael Bay movies. The point of exploding subexpressions is to\n  // control the precise order in which the generated code realizes the\n  // side effects of those subexpressions.\n  function explodeViaTempVar(tempVar, childPath, ignoreChildResult) {\n    assert.ok(childPath instanceof types.NodePath);\n\n    assert.ok(\n      !ignoreChildResult || !tempVar,\n      \"Ignoring the result of a child expression but forcing it to \" +\n        \"be assigned to a temporary variable?\"\n    );\n\n    var result = self.explodeExpression(childPath, ignoreChildResult);\n\n    if (ignoreChildResult) {\n      // Side effects already emitted above.\n\n    } else if (tempVar || (hasLeapingChildren &&\n                           !n.Literal.check(result))) {\n      // If tempVar was provided, then the result will always be assigned\n      // to it, even if the result does not otherwise need to be assigned\n      // to a temporary variable.  When no tempVar is provided, we have\n      // the flexibility to decide whether a temporary variable is really\n      // necessary.  Unfortunately, in general, a temporary variable is\n      // required whenever any child contains a yield expression, since it\n      // is difficult to prove (at all, let alone efficiently) whether\n      // this result would evaluate to the same value before and after the\n      // yield (see #206).  One narrow case where we can prove it doesn't\n      // matter (and thus we do not need a temporary variable) is when the\n      // result in question is a Literal value.\n      result = self.emitAssign(\n        tempVar || self.makeTempVar(),\n        result\n      );\n    }\n    return result;\n  }\n\n  // If ignoreResult is true, then we must take full responsibility for\n  // emitting the expression with all its side effects, and we should not\n  // return a result.\n\n  switch (expr.type) {\n  case \"MemberExpression\":\n    return finish(b.memberExpression(\n      self.explodeExpression(path.get(\"object\")),\n      expr.computed\n        ? explodeViaTempVar(null, path.get(\"property\"))\n        : expr.property,\n      expr.computed\n    ));\n\n  case \"CallExpression\":\n    var calleePath = path.get(\"callee\");\n    var argsPath = path.get(\"arguments\");\n\n    var newCallee;\n    var newArgs = [];\n\n    var hasLeapingArgs = false;\n    argsPath.each(function(argPath) {\n      hasLeapingArgs = hasLeapingArgs ||\n        meta.containsLeap(argPath.value);\n    });\n\n    if (n.MemberExpression.check(calleePath.value)) {\n      if (hasLeapingArgs) {\n        // If the arguments of the CallExpression contained any yield\n        // expressions, then we need to be sure to evaluate the callee\n        // before evaluating the arguments, but if the callee was a member\n        // expression, then we must be careful that the object of the\n        // member expression still gets bound to `this` for the call.\n\n        var newObject = explodeViaTempVar(\n          // Assign the exploded callee.object expression to a temporary\n          // variable so that we can use it twice without reevaluating it.\n          self.makeTempVar(),\n          calleePath.get(\"object\")\n        );\n\n        var newProperty = calleePath.value.computed\n          ? explodeViaTempVar(null, calleePath.get(\"property\"))\n          : calleePath.value.property;\n\n        newArgs.unshift(newObject);\n\n        newCallee = b.memberExpression(\n          b.memberExpression(\n            newObject,\n            newProperty,\n            calleePath.value.computed\n          ),\n          b.identifier(\"call\"),\n          false\n        );\n\n      } else {\n        newCallee = self.explodeExpression(calleePath);\n      }\n\n    } else {\n      newCallee = self.explodeExpression(calleePath);\n\n      if (n.MemberExpression.check(newCallee)) {\n        // If the callee was not previously a MemberExpression, then the\n        // CallExpression was \"unqualified,\" meaning its `this` object\n        // should be the global object. If the exploded expression has\n        // become a MemberExpression (e.g. a context property, probably a\n        // temporary variable), then we need to force it to be unqualified\n        // by using the (0, object.property)(...) trick; otherwise, it\n        // will receive the object of the MemberExpression as its `this`\n        // object.\n        newCallee = b.sequenceExpression([\n          b.literal(0),\n          newCallee\n        ]);\n      }\n    }\n\n    argsPath.each(function(argPath) {\n      newArgs.push(explodeViaTempVar(null, argPath));\n    });\n\n    return finish(b.callExpression(\n      newCallee,\n      newArgs\n    ));\n\n  case \"NewExpression\":\n    return finish(b.newExpression(\n      explodeViaTempVar(null, path.get(\"callee\")),\n      path.get(\"arguments\").map(function(argPath) {\n        return explodeViaTempVar(null, argPath);\n      })\n    ));\n\n  case \"ObjectExpression\":\n    return finish(b.objectExpression(\n      path.get(\"properties\").map(function(propPath) {\n        return b.property(\n          propPath.value.kind,\n          propPath.value.key,\n          explodeViaTempVar(null, propPath.get(\"value\"))\n        );\n      })\n    ));\n\n  case \"ArrayExpression\":\n    return finish(b.arrayExpression(\n      path.get(\"elements\").map(function(elemPath) {\n        return explodeViaTempVar(null, elemPath);\n      })\n    ));\n\n  case \"SequenceExpression\":\n    var lastIndex = expr.expressions.length - 1;\n\n    path.get(\"expressions\").each(function(exprPath) {\n      if (exprPath.name === lastIndex) {\n        result = self.explodeExpression(exprPath, ignoreResult);\n      } else {\n        self.explodeExpression(exprPath, true);\n      }\n    });\n\n    return result;\n\n  case \"LogicalExpression\":\n    var after = loc();\n\n    if (!ignoreResult) {\n      result = self.makeTempVar();\n    }\n\n    var left = explodeViaTempVar(result, path.get(\"left\"));\n\n    if (expr.operator === \"&&\") {\n      self.jumpIfNot(left, after);\n    } else {\n      assert.strictEqual(expr.operator, \"||\");\n      self.jumpIf(left, after);\n    }\n\n    explodeViaTempVar(result, path.get(\"right\"), ignoreResult);\n\n    self.mark(after);\n\n    return result;\n\n  case \"ConditionalExpression\":\n    var elseLoc = loc();\n    var after = loc();\n    var test = self.explodeExpression(path.get(\"test\"));\n\n    self.jumpIfNot(test, elseLoc);\n\n    if (!ignoreResult) {\n      result = self.makeTempVar();\n    }\n\n    explodeViaTempVar(result, path.get(\"consequent\"), ignoreResult);\n    self.jump(after);\n\n    self.mark(elseLoc);\n    explodeViaTempVar(result, path.get(\"alternate\"), ignoreResult);\n\n    self.mark(after);\n\n    return result;\n\n  case \"UnaryExpression\":\n    return finish(b.unaryExpression(\n      expr.operator,\n      // Can't (and don't need to) break up the syntax of the argument.\n      // Think about delete a[b].\n      self.explodeExpression(path.get(\"argument\")),\n      !!expr.prefix\n    ));\n\n  case \"BinaryExpression\":\n    return finish(b.binaryExpression(\n      expr.operator,\n      explodeViaTempVar(null, path.get(\"left\")),\n      explodeViaTempVar(null, path.get(\"right\"))\n    ));\n\n  case \"AssignmentExpression\":\n    return finish(b.assignmentExpression(\n      expr.operator,\n      self.explodeExpression(path.get(\"left\")),\n      self.explodeExpression(path.get(\"right\"))\n    ));\n\n  case \"UpdateExpression\":\n    return finish(b.updateExpression(\n      expr.operator,\n      self.explodeExpression(path.get(\"argument\")),\n      expr.prefix\n    ));\n\n  case \"YieldExpression\":\n    var after = loc();\n    var arg = expr.argument && self.explodeExpression(path.get(\"argument\"));\n\n    if (arg && expr.delegate) {\n      var result = self.makeTempVar();\n\n      self.emit(b.returnStatement(b.callExpression(\n        self.contextProperty(\"delegateYield\"), [\n          arg,\n          b.literal(result.property.name),\n          after\n        ]\n      )));\n\n      self.mark(after);\n\n      return result;\n    }\n\n    self.emitAssign(self.contextProperty(\"next\"), after);\n    self.emit(b.returnStatement(arg || null));\n    self.mark(after);\n\n    return self.contextProperty(\"sent\");\n\n  default:\n    throw new Error(\n      \"unknown Expression of type \" +\n        JSON.stringify(expr.type));\n  }\n};\n","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\nvar assert = require(\"assert\");\nvar types = require(\"recast\").types;\nvar n = types.namedTypes;\nvar b = types.builders;\nvar inherits = require(\"util\").inherits;\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction Entry() {\n  assert.ok(this instanceof Entry);\n}\n\nfunction FunctionEntry(returnLoc) {\n  Entry.call(this);\n  n.Literal.assert(returnLoc);\n  this.returnLoc = returnLoc;\n}\n\ninherits(FunctionEntry, Entry);\nexports.FunctionEntry = FunctionEntry;\n\nfunction LoopEntry(breakLoc, continueLoc, label) {\n  Entry.call(this);\n\n  n.Literal.assert(breakLoc);\n  n.Literal.assert(continueLoc);\n\n  if (label) {\n    n.Identifier.assert(label);\n  } else {\n    label = null;\n  }\n\n  this.breakLoc = breakLoc;\n  this.continueLoc = continueLoc;\n  this.label = label;\n}\n\ninherits(LoopEntry, Entry);\nexports.LoopEntry = LoopEntry;\n\nfunction SwitchEntry(breakLoc) {\n  Entry.call(this);\n  n.Literal.assert(breakLoc);\n  this.breakLoc = breakLoc;\n}\n\ninherits(SwitchEntry, Entry);\nexports.SwitchEntry = SwitchEntry;\n\nfunction TryEntry(firstLoc, catchEntry, finallyEntry) {\n  Entry.call(this);\n\n  n.Literal.assert(firstLoc);\n\n  if (catchEntry) {\n    assert.ok(catchEntry instanceof CatchEntry);\n  } else {\n    catchEntry = null;\n  }\n\n  if (finallyEntry) {\n    assert.ok(finallyEntry instanceof FinallyEntry);\n  } else {\n    finallyEntry = null;\n  }\n\n  // Have to have one or the other (or both).\n  assert.ok(catchEntry || finallyEntry);\n\n  this.firstLoc = firstLoc;\n  this.catchEntry = catchEntry;\n  this.finallyEntry = finallyEntry;\n}\n\ninherits(TryEntry, Entry);\nexports.TryEntry = TryEntry;\n\nfunction CatchEntry(firstLoc, paramId) {\n  Entry.call(this);\n\n  n.Literal.assert(firstLoc);\n  n.Identifier.assert(paramId);\n\n  this.firstLoc = firstLoc;\n  this.paramId = paramId;\n}\n\ninherits(CatchEntry, Entry);\nexports.CatchEntry = CatchEntry;\n\nfunction FinallyEntry(firstLoc, afterLoc) {\n  Entry.call(this);\n  n.Literal.assert(firstLoc);\n  n.Literal.assert(afterLoc);\n  this.firstLoc = firstLoc;\n  this.afterLoc = afterLoc;\n}\n\ninherits(FinallyEntry, Entry);\nexports.FinallyEntry = FinallyEntry;\n\nfunction LabeledEntry(breakLoc, label) {\n  Entry.call(this);\n\n  n.Literal.assert(breakLoc);\n  n.Identifier.assert(label);\n\n  this.breakLoc = breakLoc;\n  this.label = label;\n}\n\ninherits(LabeledEntry, Entry);\nexports.LabeledEntry = LabeledEntry;\n\nfunction LeapManager(emitter) {\n  assert.ok(this instanceof LeapManager);\n\n  var Emitter = require(\"./emit\").Emitter;\n  assert.ok(emitter instanceof Emitter);\n\n  this.emitter = emitter;\n  this.entryStack = [new FunctionEntry(emitter.finalLoc)];\n}\n\nvar LMp = LeapManager.prototype;\nexports.LeapManager = LeapManager;\n\nLMp.withEntry = function(entry, callback) {\n  assert.ok(entry instanceof Entry);\n  this.entryStack.push(entry);\n  try {\n    callback.call(this.emitter);\n  } finally {\n    var popped = this.entryStack.pop();\n    assert.strictEqual(popped, entry);\n  }\n};\n\nLMp._findLeapLocation = function(property, label) {\n  for (var i = this.entryStack.length - 1; i >= 0; --i) {\n    var entry = this.entryStack[i];\n    var loc = entry[property];\n    if (loc) {\n      if (label) {\n        if (entry.label &&\n            entry.label.name === label.name) {\n          return loc;\n        }\n      } else if (entry instanceof LabeledEntry) {\n        // Ignore LabeledEntry entries unless we are actually breaking to\n        // a label.\n      } else {\n        return loc;\n      }\n    }\n  }\n\n  return null;\n};\n\nLMp.getBreakLoc = function(label) {\n  return this._findLeapLocation(\"breakLoc\", label);\n};\n\nLMp.getContinueLoc = function(label) {\n  return this._findLeapLocation(\"continueLoc\", label);\n};\n","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\nvar assert = require(\"assert\");\nvar types = require(\"recast\").types;\nvar n = types.namedTypes;\nvar b = types.builders;\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nexports.defaults = function(obj) {\n  var len = arguments.length;\n  var extension;\n\n  for (var i = 1; i < len; ++i) {\n    if ((extension = arguments[i])) {\n      for (var key in extension) {\n        if (hasOwn.call(extension, key) && !hasOwn.call(obj, key)) {\n          obj[key] = extension[key];\n        }\n      }\n    }\n  }\n\n  return obj;\n};\n\nexports.runtimeProperty = function(name) {\n  return b.memberExpression(\n    b.identifier(\"regeneratorRuntime\"),\n    b.identifier(name),\n    false\n  );\n};\n\n// Inspired by the isReference function from ast-util:\n// https://github.com/eventualbuddha/ast-util/blob/9bf91c5ce8/lib/index.js#L466-L506\nexports.isReference = function(path, name) {\n  var node = path.value;\n\n  if (!n.Identifier.check(node)) {\n    return false;\n  }\n\n  if (name && node.name !== name) {\n    return false;\n  }\n\n  var parent = path.parent.value;\n\n  switch (parent.type) {\n  case \"VariableDeclarator\":\n    return path.name === \"init\";\n\n  case \"MemberExpression\":\n    return path.name === \"object\" || (\n      parent.computed && path.name === \"property\"\n    );\n\n  case \"FunctionExpression\":\n  case \"FunctionDeclaration\":\n  case \"ArrowFunctionExpression\":\n    if (path.name === \"id\") {\n      return false;\n    }\n\n    if (path.parentPath.name === \"params\" &&\n        parent.params === path.parentPath.value &&\n        parent.params[path.name] === node) {\n      return false;\n    }\n\n    return true;\n\n  case \"ClassDeclaration\":\n  case \"ClassExpression\":\n    return path.name !== \"id\";\n\n  case \"CatchClause\":\n    return path.name !== \"param\";\n\n  case \"Property\":\n  case \"MethodDefinition\":\n    return path.name !== \"key\";\n\n  case \"ImportSpecifier\":\n  case \"ImportDefaultSpecifier\":\n  case \"ImportNamespaceSpecifier\":\n  case \"LabeledStatement\":\n    return false;\n\n  default:\n    return true;\n  }\n};\n","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\nvar assert = require(\"assert\");\nvar m = require(\"private\").makeAccessor();\nvar types = require(\"recast\").types;\nvar isArray = types.builtInTypes.array;\nvar n = types.namedTypes;\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction makePredicate(propertyName, knownTypes) {\n  function onlyChildren(node) {\n    n.Node.assert(node);\n\n    // Assume no side effects until we find out otherwise.\n    var result = false;\n\n    function check(child) {\n      if (result) {\n        // Do nothing.\n      } else if (isArray.check(child)) {\n        child.some(check);\n      } else if (n.Node.check(child)) {\n        assert.strictEqual(result, false);\n        result = predicate(child);\n      }\n      return result;\n    }\n\n    types.eachField(node, function(name, child) {\n      check(child);\n    });\n\n    return result;\n  }\n\n  function predicate(node) {\n    n.Node.assert(node);\n\n    var meta = m(node);\n    if (hasOwn.call(meta, propertyName))\n      return meta[propertyName];\n\n    // Certain types are \"opaque,\" which means they have no side\n    // effects or leaps and we don't care about their subexpressions.\n    if (hasOwn.call(opaqueTypes, node.type))\n      return meta[propertyName] = false;\n\n    if (hasOwn.call(knownTypes, node.type))\n      return meta[propertyName] = true;\n\n    return meta[propertyName] = onlyChildren(node);\n  }\n\n  predicate.onlyChildren = onlyChildren;\n\n  return predicate;\n}\n\nvar opaqueTypes = {\n  FunctionExpression: true\n};\n\n// These types potentially have side effects regardless of what side\n// effects their subexpressions have.\nvar sideEffectTypes = {\n  CallExpression: true, // Anything could happen!\n  ForInStatement: true, // Modifies the key variable.\n  UnaryExpression: true, // Think delete.\n  BinaryExpression: true, // Might invoke .toString() or .valueOf().\n  AssignmentExpression: true, // Side-effecting by definition.\n  UpdateExpression: true, // Updates are essentially assignments.\n  NewExpression: true // Similar to CallExpression.\n};\n\n// These types are the direct cause of all leaps in control flow.\nvar leapTypes = {\n  YieldExpression: true,\n  BreakStatement: true,\n  ContinueStatement: true,\n  ReturnStatement: true,\n  ThrowStatement: true\n};\n\n// All leap types are also side effect types.\nfor (var type in leapTypes) {\n  if (hasOwn.call(leapTypes, type)) {\n    sideEffectTypes[type] = leapTypes[type];\n  }\n}\n\nexports.hasSideEffects = makePredicate(\"hasSideEffects\", sideEffectTypes);\nexports.containsLeap = makePredicate(\"containsLeap\", leapTypes);\n","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \n\n  var hasOwn = Object.prototype.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var iteratorSymbol =\n    typeof Symbol === \"function\" && Symbol.iterator || \"@@iterator\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided, then outerFn.prototype instanceof Generator.\n    var generator = Object.create((outerFn || Generator).prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `value instanceof AwaitArgument` to determine if the yielded value is\n  // meant to be awaited. Some may consider the name of this method too\n  // cutesy, but they are curmudgeons.\n  runtime.awrap = function(arg) {\n    return new AwaitArgument(arg);\n  };\n\n  function AwaitArgument(arg) {\n    this.arg = arg;\n  }\n\n  function AsyncIterator(generator) {\n    // This invoke function is written in a style that assumes some\n    // calling function (or Promise) will handle exceptions.\n    function invoke(method, arg) {\n      var result = generator[method](arg);\n      var value = result.value;\n      return value instanceof AwaitArgument\n        ? Promise.resolve(value.arg).then(invokeNext, invokeThrow)\n        : Promise.resolve(value).then(function(unwrapped) {\n            // When a yielded Promise is resolved, its final value becomes\n            // the .value of the Promise<{value,done}> result for the\n            // current iteration. If the Promise is rejected, however, the\n            // result for this iteration will be rejected with the same\n            // reason. Note that rejections of yielded Promises are not\n            // thrown back into the generator function, as is the case\n            // when an awaited Promise is rejected. This difference in\n            // behavior between yield and await is important, because it\n            // allows the consumer to decide what to do with the yielded\n            // rejection (swallow it and continue, manually .throw it back\n            // into the generator, abandon iteration, whatever). With\n            // await, by contrast, there is no opportunity to examine the\n            // rejection reason outside the generator function, so the\n            // only option is to throw it from the await expression, and\n            // let the generator function handle the exception.\n            result.value = unwrapped;\n            return result;\n          });\n    }\n\n    if (typeof process === \"object\" && process.domain) {\n      invoke = process.domain.bind(invoke);\n    }\n\n    var invokeNext = invoke.bind(generator, \"next\");\n    var invokeThrow = invoke.bind(generator, \"throw\");\n    var invokeReturn = invoke.bind(generator, \"return\");\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return invoke(method, arg);\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : new Promise(function (resolve) {\n          resolve(callInvokeWithMethodAndArg());\n        });\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          if (method === \"return\" ||\n              (method === \"throw\" && delegate.iterator[method] === undefined)) {\n            // A return or throw (when the delegate iterator has no throw\n            // method) always terminates the yield* loop.\n            context.delegate = null;\n\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            var returnMethod = delegate.iterator[\"return\"];\n            if (returnMethod) {\n              var record = tryCatch(returnMethod, delegate.iterator, arg);\n              if (record.type === \"throw\") {\n                // If the return method threw an exception, let that\n                // exception prevail over the original return or throw.\n                method = \"throw\";\n                arg = record.arg;\n                continue;\n              }\n            }\n\n            if (method === \"return\") {\n              // Continue with the outer return, now that the delegate\n              // iterator has been terminated.\n              continue;\n            }\n          }\n\n          var record = tryCatch(\n            delegate.iterator[method],\n            delegate.iterator,\n            arg\n          );\n\n          if (record.type === \"throw\") {\n            context.delegate = null;\n\n            // Like returning generator.throw(uncaught), but without the\n            // overhead of an extra function call.\n            method = \"throw\";\n            arg = record.arg;\n            continue;\n          }\n\n          // Delegate generator ran and handled its own exceptions so\n          // regardless of what the method was, we continue as if it is\n          // \"next\" with an undefined arg.\n          method = \"next\";\n          arg = undefined;\n\n          var info = record.arg;\n          if (info.done) {\n            context[delegate.resultName] = info.value;\n            context.next = delegate.nextLoc;\n          } else {\n            state = GenStateSuspendedYield;\n            return info;\n          }\n\n          context.delegate = null;\n        }\n\n        if (method === \"next\") {\n          if (state === GenStateSuspendedYield) {\n            context.sent = arg;\n          } else {\n            context.sent = undefined;\n          }\n\n        } else if (method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw arg;\n          }\n\n          if (context.dispatchException(arg)) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            method = \"next\";\n            arg = undefined;\n          }\n\n        } else if (method === \"return\") {\n          context.abrupt(\"return\", arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          var info = {\n            value: record.arg,\n            done: context.done\n          };\n\n          if (record.arg === ContinueSentinel) {\n            if (context.delegate && method === \"next\") {\n              // Deliberately forget the last sent value so that we don't\n              // accidentally pass it on to the delegate.\n              arg = undefined;\n            }\n          } else {\n            return info;\n          }\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(arg) call above.\n          method = \"throw\";\n          arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      this.sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.next = finallyEntry.finallyLoc;\n      } else {\n        this.complete(record);\n      }\n\n      return ContinueSentinel;\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = record.arg;\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n"]}